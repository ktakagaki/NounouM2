(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    191952,       3574]
NotebookOptionsPosition[    188603,       3452]
NotebookOutlinePosition[    188948,       3467]
CellTagsIndexPosition[    188905,       3464]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Test file reading", "Title",
 CellChangeTimes->{{3.6000809243998537`*^9, 3.6000809304792013`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<<", "NounouM2`"}]], "Input",
 CellChangeTimes->{{3.599981355217822*^9, 3.599981360831143*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Welcome to NounouM2, the Mathematica interface to nounou!\"\
\>"], "Print",
 CellChangeTimes->{3.59998283866967*^9, 3.600079861428055*^9, 
  3.600080148868496*^9, 3.6000802398226976`*^9, 3.600080747324725*^9, 
  3.600080935823507*^9, 3.600081385748241*^9, 3.6000822668036346`*^9, 
  3.6000827495052433`*^9, 3.6000831069936905`*^9, 3.6000833905039062`*^9, 
  3.6000843614004383`*^9, 3.600084550300243*^9, 3.600084595493828*^9, 
  3.60008480567885*^9, 3.6000849385144477`*^9, 3.6000850296226587`*^9, 
  3.600089318628976*^9, 3.600089914908081*^9, 3.6000904068382177`*^9, 
  3.6000948491323023`*^9, 3.6000953799296627`*^9, 3.6000954605162716`*^9, 
  3.6000956700012536`*^9, 3.600100206187709*^9, 3.6001003038312936`*^9, 
  3.6001003386542854`*^9, 3.6001005506594114`*^9, 3.600100705730281*^9, 
  3.6001027761337013`*^9}],

Cell[BoxData["\<\"(last updated:  Thu 30 Jan 2014 21:32:51)\"\>"], "Print",
 CellChangeTimes->{3.59998283866967*^9, 3.600079861428055*^9, 
  3.600080148868496*^9, 3.6000802398226976`*^9, 3.600080747324725*^9, 
  3.600080935823507*^9, 3.600081385748241*^9, 3.6000822668036346`*^9, 
  3.6000827495052433`*^9, 3.6000831069936905`*^9, 3.6000833905039062`*^9, 
  3.6000843614004383`*^9, 3.600084550300243*^9, 3.600084595493828*^9, 
  3.60008480567885*^9, 3.6000849385144477`*^9, 3.6000850296226587`*^9, 
  3.600089318628976*^9, 3.600089914908081*^9, 3.6000904068382177`*^9, 
  3.6000948491323023`*^9, 3.6000953799296627`*^9, 3.6000954605162716`*^9, 
  3.6000956700012536`*^9, 3.600100206187709*^9, 3.6001003038312936`*^9, 
  3.6001003386542854`*^9, 3.6001005506594114`*^9, 3.600100705730281*^9, 
  3.600102776135701*^9}],

Cell[BoxData["\<\"<<Set JLink` java stack size to 3072Mb>>\"\>"], "Print",
 CellChangeTimes->{3.59998283866967*^9, 3.600079861428055*^9, 
  3.600080148868496*^9, 3.6000802398226976`*^9, 3.600080747324725*^9, 
  3.600080935823507*^9, 3.600081385748241*^9, 3.6000822668036346`*^9, 
  3.6000827495052433`*^9, 3.6000831069936905`*^9, 3.6000833905039062`*^9, 
  3.6000843614004383`*^9, 3.600084550300243*^9, 3.600084595493828*^9, 
  3.60008480567885*^9, 3.6000849385144477`*^9, 3.6000850296226587`*^9, 
  3.600089318628976*^9, 3.600089914908081*^9, 3.6000904068382177`*^9, 
  3.6000948491323023`*^9, 3.6000953799296627`*^9, 3.6000954605162716`*^9, 
  3.6000956700012536`*^9, 3.600100206187709*^9, 3.6001003038312936`*^9, 
  3.6001003386542854`*^9, 3.6001005506594114`*^9, 3.600100705730281*^9, 
  3.6001027761767035`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowJavaConsole", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6000823207327194`*^9, 3.600082344927103*^9}, {
  3.600082380437134*^9, 3.6000823839433346`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
    "com", ".", "wolfram", ".", "jlink", ".", "ui", ".", "ConsoleWindow"}], 
    "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm1`JavaObject14603888392929281]], "Output",
 CellChangeTimes->{3.6000823858544436`*^9, 3.6000827541265078`*^9, 
  3.600083110672901*^9, 3.6000833917939806`*^9, 3.600084363211542*^9, 
  3.6000845516193185`*^9, 3.6000845973929367`*^9, 3.600084807725967*^9, 
  3.6000849402755485`*^9, 3.6000850309847364`*^9, 3.6000892299139013`*^9, 
  3.6000893199890537`*^9, 3.600089925078663*^9, 3.6000904085423155`*^9, 
  3.6000948519004607`*^9, 3.600095381954778*^9, 3.6000954619093513`*^9, 
  3.600095673487453*^9, 3.600100207868805*^9, 3.6001003053643813`*^9, 
  3.600100340291379*^9, 3.6001005522755036`*^9, 3.600100707221366*^9, 
  3.6001027775637827`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nounou", "=", 
  RowBox[{"JavaNew", "[", "\"\<nounou.DataReader\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.5999828894585752`*^9, 3.599982925082613*^9}, {
  3.599983117882641*^9, 3.5999831391778584`*^9}, {3.599983204784611*^9, 
  3.5999832180723715`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{"nounou", ".", "DataReader"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm1`JavaObject7615128933498881]], "Output",
 CellChangeTimes->{{3.599983124811037*^9, 3.599983139772893*^9}, 
   3.599983219552456*^9, 3.600079873593751*^9, 3.6000802451170006`*^9, 
   3.6000807487418065`*^9, 3.600080940059749*^9, 3.6000813885614023`*^9, 
   3.600082268156712*^9, 3.6000827544725275`*^9, 3.600083111040922*^9, 
   3.600083392142*^9, 3.6000843635635624`*^9, 3.600084551976339*^9, 
   3.6000845977409563`*^9, 3.6000848081019883`*^9, 3.6000849406285686`*^9, 
   3.6000850313247557`*^9, 3.600089234291152*^9, 3.6000893203200727`*^9, 
   3.600089934616208*^9, 3.600090408854333*^9, 3.60009485223348*^9, 
   3.6000953861420174`*^9, 3.60009546223237*^9, 3.600095673808471*^9, 
   3.6000967539932547`*^9, 3.600100208193823*^9, 3.600100305668399*^9, 
   3.6001003406053967`*^9, 3.6001005525825214`*^9, 3.6001007075283833`*^9, 
   3.6001027778838015`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testFileHead", " ", "=", " ", 
  RowBox[{
   RowBox[{"ParentDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
   "\"\<\\\\_testFiles\>\""}]}]], "Input",
 CellChangeTimes->{{3.600080253651489*^9, 3.6000803401674376`*^9}}],

Cell[BoxData["\<\"V:\\\\docs\\\\bb\\\\NounouM2\\\\Testing\\\\_testFiles\"\>"],\
 "Output",
 CellChangeTimes->{{3.6000802584477634`*^9, 3.6000802712374945`*^9}, 
   3.6000803090106554`*^9, 3.6000803422025537`*^9, 3.600080750257893*^9, 
   3.600080940907798*^9, 3.6000813892364407`*^9, 3.6000822705908513`*^9, 
   3.600082758199741*^9, 3.6000831137310762`*^9, 3.600083392193003*^9, 
   3.6000843670187597`*^9, 3.6000845520283422`*^9, 3.6000846009661407`*^9, 
   3.600084810798143*^9, 3.6000849406805716`*^9, 3.6000850313667583`*^9, 
   3.6000892350881977`*^9, 3.6000893203820763`*^9, 3.6000899353182487`*^9, 
   3.6000904109454527`*^9, 3.600094852302484*^9, 3.6000953863160276`*^9, 
   3.600095462287373*^9, 3.6000956738674746`*^9, 3.600096754492283*^9, 
   3.6001002082358255`*^9, 3.600100305711401*^9, 3.6001003406513996`*^9, 
   3.600100552627524*^9, 3.6001007075713863`*^9, 3.6001027779418044`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Load with ScalaFx", "Section",
 CellChangeTimes->{{3.600080758210348*^9, 3.6000807668348413`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nounou", "@", 
  RowBox[{"load", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.600080617425296*^9, 3.600080620010443*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Java", "::", "excptn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"A Java exception occurred: \
\[NoBreak]\\!\\(\\\"java.lang.IllegalStateException: Not on FX application \
thread; currentThread = J/Link reader\\\\n\\\\tat \
com.sun.javafx.tk.Toolkit.checkFxUserThread(Unknown Source)\\\\n\\\\tat \
com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(Unknown \
Source)\\\\n\\\\tat javafx.scene.Scene.<init>(Unknown Source)\\\\n\\\\tat \
javafx.scene.Scene.<init>(Unknown Source)\\\\n\\\\tat \
javafx.stage.PopupWindow.<init>(Unknown Source)\\\\n\\\\tat \
javafx.stage.Popup.<init>(Unknown Source)\\\\n\\\\tat \
scalafx.stage.Popup$.$lessinit$greater$default$1(Popup.scala:41)\\\\n\\\\tat \
nounou.DataReader.load(DataReader.scala:37)\\\"\\)\[NoBreak].\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.600080620362464*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Load", "Section",
 CellChangeTimes->{{3.600080758210348*^9, 3.6000807668348413`*^9}, {
  3.6000809486372395`*^9, 3.600080948805249*^9}}],

Cell[BoxData[
 RowBox[{"nounou", "@", 
  RowBox[{"reload", "[", 
   RowBox[{"testFileHead", "<>", "\"\<\\\\t130911\\\\Tet4a.ncs\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.600080345516743*^9, 3.600080359604549*^9}, {
  3.6000804061012087`*^9, 3.6000804270454063`*^9}, {3.6000804951493015`*^9, 
  3.6000804952753086`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nounou", "@", 
  RowBox[{
   RowBox[{"data", "[", "]"}], "@", 
   RowBox[{"segmentCount", "[", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6000850961234627`*^9, 3.6000851335066004`*^9}, {
  3.6000851827304163`*^9, 3.600085193266019*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.600085101525771*^9, 3.6000851270522313`*^9}, {
   3.600085185090551*^9, 3.6000851938330507`*^9}, 3.600089238834412*^9, {
   3.600089324519313*^9, 3.600089336131977*^9}, 3.6000899382494164`*^9, 
   3.600090414080632*^9, 3.600094856417719*^9, 3.6000953883401437`*^9, 
   3.6000954654585543`*^9, 3.6000956789297643`*^9, 3.600096756386391*^9, 
   3.600100213369119*^9, 3.6001003088065777`*^9, 3.6001003437565775`*^9, 
   3.6001005563227353`*^9, 3.6001007107105656`*^9, 3.6001027823490562`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Methods", "[", 
   RowBox[{"nounou", "@", 
    RowBox[{"data", "[", "]"}]}], "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.6000850961234627`*^9, 3.6000851335066004`*^9}, {
  3.6000851827304163`*^9, 3.6000852090039186`*^9}, {3.600094862678077*^9, 
  3.600094864215165*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"double absGain()\"\>"},
     {"\<\"double absOffset()\"\>"},
     {"\<\"String absUnit()\"\>"},
     {"\<\"nounou.data.XDataChannel apply(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector array()\"\>"},
     {"\<\"int channelCount()\"\>"},
     {"\<\"scala.collection.immutable.Vector channelNames()\"\>"},
     {"\<\"int currentSegment()\"\>"},
     {"\<\"int currentSegment_$eq(int)\"\>"},
     {"\<\"boolean equals(Object)\"\>"},
     {"\<\"double framesPerTS()\"\>"},
     {"\<\"long frameToTS(int, int)\"\>"},
     {"\<\"Class getClass()\"\>"},
     {"\<\"int hashCode()\"\>"},
     {"\<\"boolean isCompatible(nounou.data.X)\"\>"},
     {"\<\"boolean isValidChannel(int)\"\>"},
     {"\<\"boolean isValidFrame(int)\"\>"},
     {"\<\"boolean isValidFrame(int, int)\"\>"},
     {"\<\"nounou.data.XDataChannelArray \
loadDataChannel(nounou.data.XDataChannel)\"\>"},
     {"\<\"void notify()\"\>"},
     {"\<\"void notifyAll()\"\>"},
     {"\<\"void nounou$data$traits$XAbsoluteImmutable$_setter_$xBits_$eq(int)\
\"\>"},
     {"\<\"int nounou$data$traits$XFrames$$_currentSegment()\"\>"},
     {"\<\"void nounou$data$traits$XFrames$$_currentSegment_$eq(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readFrameImpl(int, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readFrameImpl(int, \
scala.collection.immutable.Vector, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readFrame(int, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readFrame(int, \
scala.collection.immutable.Vector, int)\"\>"},
     {"\<\"double readPointAbs(int, int)\"\>"},
     {"\<\"double readPointAbs(int, int, int)\"\>"},
     {"\<\"int readPointImpl(int, int, int)\"\>"},
     {"\<\"int readPoint(int, int)\"\>"},
     {"\<\"int readPoint(int, int, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readTraceAbs(int, \
nounou.data.Span)\"\>"},
     {"\<\"scala.collection.immutable.Vector readTraceAbs(int, \
nounou.data.Span, int)\"\>"},
     {"\<\"nounou.data.Span readTraceAbs$default$2()\"\>"},
     {"\<\"scala.collection.immutable.Vector readTraceImpl(int, \
nounou.data.Span, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readTrace(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector readTrace(int, nounou.data.Span)\
\"\>"},
     {"\<\"scala.collection.immutable.Vector readTrace(int, nounou.data.Span, \
int)\"\>"},
     {"\<\"double sampleInterval()\"\>"},
     {"\<\"double sampleRate()\"\>"},
     {"\<\"int segmentCount()\"\>"},
     {"\<\"scala.collection.immutable.Vector segmentEndTSs()\"\>"},
     {"\<\"scala.collection.immutable.Vector segmentLengths()\"\>"},
     {"\<\"scala.collection.immutable.Vector segmentStartFrames()\"\>"},
     {"\<\"scala.collection.immutable.Vector segmentStartTSs()\"\>"},
     {"\<\"double toAbs(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector \
toAbs(scala.collection.immutable.Vector)\"\>"},
     {"\<\"String toString()\"\>"},
     {"\<\"double tsPerFrame()\"\>"},
     {"\<\"scala.Tuple2 tsToFrame(long)\"\>"},
     {"\<\"void wait(long, int) throws InterruptedException\"\>"},
     {"\<\"void wait(long) throws InterruptedException\"\>"},
     {"\<\"void wait() throws InterruptedException\"\>"},
     {"\<\"int xBits()\"\>"},
     {"\<\"double xBitsD()\"\>"},
     {"\<\"nounou.data.XDataChannelArray \
$colon$colon$colon(nounou.data.X)\"\>"},
     {"\<\"nounou.data.XData $colon$colon$colon(nounou.data.X)\"\>"},
     {"\<\"nounou.data.X $colon$colon$colon(nounou.data.X)\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6000852094759455`*^9, 3.600089939739501*^9, 
  3.600090418705897*^9, 3.600094856722737*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Try with scala methods (Vector is harder to read)", "Subsection",
 CellChangeTimes->{{3.6000904318366475`*^9, 3.6000904570830917`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vect", "=", 
  RowBox[{"nounou", "@", 
   RowBox[{
    RowBox[{"data", "[", "]"}], "@", 
    RowBox[{"readTrace", "[", 
     RowBox[{"0", ",", " ", 
      RowBox[{"NNJ`Span", "[", 
       RowBox[{"0", ",", 
        RowBox[{"512", "*", "10"}], ",", "1"}], "]"}], ",", " ", "0"}], " ", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6000852384596033`*^9, 3.600085244552952*^9}, {
   3.6000892650139093`*^9, 3.6000892834449635`*^9}, {3.600089342198324*^9, 
   3.600089343335389*^9}, {3.6000900166909027`*^9, 3.6000900179779763`*^9}, 
   3.6000949238645773`*^9, {3.6000950445684805`*^9, 3.6000950448624973`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{"scala", ".", "collection", ".", "immutable", ".", "Vector"}], 
    "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm1`JavaObject1118770579898369]], "Output",
 CellChangeTimes->{3.6000893463145595`*^9, 3.6000899645869226`*^9, 
  3.600090038100127*^9, 3.6000949316210203`*^9, 3.6000950455725384`*^9, 
  3.6000953907822833`*^9, 3.600095466989642*^9, 3.6000956807838707`*^9, 
  3.6000967608786483`*^9, 3.6001002150502157`*^9, 3.6001003102096586`*^9, 
  3.600100345008649*^9, 3.6001005577108145`*^9, 3.6001007120476418`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vect", "@", 
  RowBox[{"length", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.600094994093594*^9, 3.6000950007809763`*^9}}],

Cell[BoxData["5122"], "Output",
 CellChangeTimes->{3.600095000995989*^9, 3.6000950481436853`*^9, 
  3.600096769412136*^9, 3.6001002155932465`*^9, 3.600100310402669*^9, 
  3.6001003451306553`*^9, 3.6001005578538227`*^9, 3.6001007125766726`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"vect", "@", 
       RowBox[{"apply", "[", "#", "]"}]}], "&"}], " ", "/@", " ", 
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", 
       RowBox[{"512", "*", "10"}]}], "]"}]}], "/", "1024"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6000900226142416`*^9, 3.60009002923062*^9}, {
   3.600090061450463*^9, 3.6000900616744757`*^9}, {3.6000949386064205`*^9, 
   3.600094961575734*^9}, {3.600100757904265*^9, 3.600100758774315*^9}, {
   3.600100809095193*^9, 3.600100813277432*^9}, {3.6001009027815514`*^9, 
   3.6001009113320403`*^9}, 3.6001010541402087`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1: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
J19xOPB6zwXyfYXx095Wwt7Pk/QcFP4zquRXB642PPonNcpP++m+MevvOrgc
/dWrL/oH7guwP+q+tULH/8ZHfrnPuJj623MkVYSv31z9pbTC99CX57yyyNe+
eO4xcBoeORy4U32Sv+5bT9Ef7oa9z6jHc3K0v71+T/3uOq334/QrP+PHDNyL
fJ7zc75hyHVC5BmGk4x3RnxPel1XdDw0qr1gD2Pqg/R7jnQWHvc99jVhePS3
PQfufTNTEXvynG2K/oLnTL0PbkZ9o8+cv6c/cdP04e931vQxHzin/eC/3X2M
CcK7B+ewN89lphhfeE4/yf45z80kyM88WPv2nKPyF3juhP54ofv4WZ/xHKr+
iYv184z/Q/0YpNGP53IyjKf0s+F9emX+nvg9dx2nP+Q+EseHnivw3LT7AvTD
Uql8JeHpum8h458qmfA9p+H9bDV+z72atbD+8uqMj/l+z43qt1u/CN6bkzI8
1l8aYe9za3KdmvnwZvXPfHaL+mP+thVuQl+uGw5RP7TDKe/r9Hvyr1N56F92
+Z76ujuiP8/F6+e5NyJPn+ml/nTdPed9RX7P/OsgrJ+sIfWhnxlYP6T6odDf
v+ciW7Cn0Uh6PVcXI3+zMvKNGx/zyxPKw3yu6+iLfpr9PesxV00v/pOmDX9D
eHru2nvScspL/t6EnY/3HKj3FHnuy3vc3IejP0X3bet3WT88+tV9oHz6gWff
h/cY5Om3QH/AnntlPawAdr2x0HOerJ8Uwe7XLIb1e1cC63c5Dlt+SmH94Jb5
PetZ5YavH2jlf114rjd85KkwPPbvVcKe70i6D4/xZpXfsz7gvhjvhdGvg/5b
axfjzz7zrNOvzObwrIe9R6PB36OflO8Jv1G/APXh2aQ83HfRLBcFbjE8xuOt
vvfeO1j/p+2w9xTph0A/152ml/WeLsOnPXLfovfc9vh77LdX/RB/n/HTvrgP
sulw4Ix+F6iv3Pce2xh4CHY/tn5J3N89Ag/RPz0HF9Oejxoe+8nHtGf9vLnP
HntwH5r3TUws2mf43nPNE7SvU6aP+sZ9lrF1gfUrYXmb8ffUdznjo769qb4Z
z88aHvuv52D9gs37Pfl3z98zn7FgftC+PfA97VfMfYCUN/d5em+EfqHc3+6+
Ku9B1i+NfteLfO/5X/3KeP7Xc8O0j54r9r7wUs+VYC9lvmf9TT9F3rOWUH7i
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
oI96703rCE/9+rmfoUG/c8i3S/3pN1N7pH7eDXtveKPyou89sOewmmD9yu2F
Y8jTrJ9B1u/2mR/u39beXP83PxgPtyof/YsDps97KtUX7Yn30Czem2h+E94h
2XuoYO/d6TC9rv/LxH/Y+NBvl/KSH0dg733qNn2EdxT2HsAeyyfl45j56fjf
3xPeceVxf5nv0f8Jy5d+N9U38Z3Uftl/kNH+WA8eMDz0O6j8fH9Kpr8wJCP/
aVg/OsOWR+Q5Y3lw/5rykR9n1Z9+8qyf4PPKr39b7QN+IqKPMetn7P0C7Pxn
1vCw94vKQ3jj5jfyPak98/sJ8wP9XDJ80j9p/Ud5uRyp36asv5H3ivWtfkth
/aR6r533ZExrf9j7U/7ee0wNH3u6Duu3MGd9Qv1wQ30h303LE/Lfgj0nPhv5
/rb5y/dzsOeY71je9DNpetHvXVh/9fesv/heP5z6VViwvkI/T1t/O/6HnX99
6Pfew0m7672QS2D9OOXB7gNeCuvnJB92f/4y2P2UBbDt83JYvx+FsPm5Ak5Q
3xRF5HsMdvxYHJFXP6buty1RHuq3x2H9rsdh/UKtgj23WOr38GrY/XBlsPcM
rlE+9//B+vHQD6zncBP6iSX+dbB+LterP3iD7P4/2HsyN8LeS1gJ68dwk/nl
OTDYc+WbI/FXmT+u/8PeS1pt/pBfW42P/K+B9Te4Tf17byLs/prtsP/q4D7G
uzu0D+8DV//sN9jp96xnNcjsf99lfrKenoK9v917OPU/2Gh+017sgZ0Pa/L3
nAfcq19i9hs0Gx/v9xkf+z9aFr8Pz/1yPPy+FU6zfqjfY/e3tRke/tgOWr4a
w7Nd+2C/xCG/fxnhyviT79B+9AcH98CH1QfxdRkf/uaPLHJ4dqsv9tccNb5S
wpU5j3BM+2D/aK/v14bwj5vfnBfps7zCJ7Qnzkv0+975f+2X/kjG9OCfZADu
4vztoPYHO07JsP9/yPzBP+Rp5X15eA6rD84znFE+7iMY0Z6xr7Pqi/n3c9oT
+jvv9+8M34/Kbw/PJyzffD9m/dIRnheUl/zKwm3o76Lys99mXH1Qnz5pfaFf
ee2D8PV7HVsdnpPa51vD87Lpw56mfE9+XzE/KH9XF+uHwNcMn/pi2vqV9D6l
vqkfZix/9Feuaw/Im9Pe6O/dMHzvZY20P7cW7SM8Z2HX026rf+9RUx76+3eM
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
tNeu8Bz0PevZp+AS1lOH4Er6O6dh73Efhj0/dWYxv8NzBPaer7Ow53nOwd6T
dl770P+f4VNfPAF7T/YY7PrIBfPLc/yw/eWL1pfUR+PqQ/8/sP7rJiyvpOcS
rB/xSfjyAE/Ye8amYO/tvALrp/RqpH25BnsPxTSsX++nYM/RzcCuj16H9SOa
g/UzfQPWD/JN8xv5blm/kP5Z9U16bsP6jZkzftt/y5/tP+y+wbuw59TvWZ9g
P/fhBfZTLCzWN+H5tPUd8j+A9SP/UHvxHjDG5d57sQS2v5oHe6/OUth7LfNh
1/eXwd6zUQA7/7kc1p9QIez61wrYez6KYPerPQbrf60Y1t/nSuU5Ep4lcAXv
H4dHKd9xeJrzoavgFs5HlsKZjvBcDU/wfRkcp/5YA9dynrccznJ/3lo42Rye
CXiK+Nepj8Phud7fc5/HBpn6vUL5OE+80fjeFrgSTtN+b4JHuL81Kdv+wzHa
3yq4iPZpi/qhfaqGh2mPtyrfZwPXwHm0L9vgAvyT1xqe7T9cyPs6eI74d8D3
4Hrzl9/vhEvwn92gPRD+LniS71NwI+33bu2f941wN+Ht0f5Jb5P6w7/9XjiB
PM3KQ3u7D+6hP9Ni/uF/fL/2TP+p1fDwX3BA/WAPbeob/wEH5feG37fD87b/
2sMunoaPvXUYf0d4dmrP+A84rD45r93l95xPP2J+Il837P0yR/2e+qrH+GjP
jsH5lIde5aU8Hjf/+H2fTH12Am4g/H6/p3yetPxTH2TUj+f/Fu0hPAe1f8I/
BffRHg5ZH9AfOK09uP9P+6W+OgN7XnkEdv/uWdjzyues/6j/zy/aL+kwv2mf
nrB8UF+OLdpzeF5Q3/r/M3/hi5Z/7+2GvZfsSdh7viZg7w2/ZP4R3iSsv5bL
cBPyTVk+0O8V84/3V9Wv/v9gzzdNGz/8FDwOzxgf+r1ufeT8P6zfzhvWJ7Rn
N+F28uOW+Yt8sxG+rb3xe+e93b98B3Z8O6/8tv/wop832yf3/8PeW7Bgehz/
w/o5egC7P/Ch6SN/YszDjzNfuATW/3Ee7L3uS2H9XufDjp+XwaPovwDO4C9h
OVxM+IWw+y9XwOZvEex9lY8ZH/fJFMP6L1gJaw8l8Czpexz2fuW4zH2rq+BY
feBSuIn4V8PznwnPMn9P/btG5j7gcjjJ/aZrZe6jTfh77gdaB3sf3Xq4gvpj
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
T8esH7D334M3ON8LF8K/b33n+m8k/X+gPukfXrR80r/6Q+0dHo/U/38Uqc+f
tDyR/j+O1GcTpo/8/4n1A+8vwd6f+Sew97FMmr/o709tP5DnMux9RH9m/nv/
nPZJ+H/u99jLFbgG/fyF8tI+XIW97/UvlY/31yyPhPdXtlfoY9ryjvx/Dc+6
nh2pf/4GzpL/M+qX/uTfar/MT1zXXqgf/055yb+c+kXev7f8op8bcCf58Q/q
i/TetP4nvH/0PfX7LfVP/P9k/cd+5FnT96rsM49/1t72BL5teWN/6b/4/u2B
54yf/U7/anjvDnzH+Nj/8m/m36cDzy+2n4H/3d/Dd5Wf/Tj/oT6PBL6nvRLe
fy7ab+D72g/7h/4LLuX9gvUf4f+3+c/vn4YrTgb+H3g7+48fWF+wv/h/F9vD
wA+1R+T9P/XF/qbY9wI3wc+CM6RnCTzVEfjZcA3y58EV7E/+KTjL/qelcILf
/zQ8zf7ffDjHfrafgWMlgZfJ7w/8s7D71wqM743h+XNwmvHUcjiVCs/nyNhP
oeHXhOfPw7X0V1bAccL7Bdj7bopMv+N/2PHXY3BPS4jvl5QvGbgYLqa8/TJs
fbDS+CmfvwInka/E8BiP/qr6pr57HM6nfP6a75kPiJvfjLeeCzdQ3lfB3jf3
63CZ+yPhecr3b5gf1JerYedTftPfw2XwLOn/Ldj7LdaoH37/28rr/Qqw9wP+
Dux9xGvVH/Xl78KNtA8JeBx9Pw/2/tB1pgf5nq/+qI/Xm//I8wLY+043aK/o
44X+Hq7QPgj/Rf6e/Nho+aT9f7H5zfeVlkf08xI4j/A2WX7J75dq/+Rn0vSj
j5fBjlc3Gz7peTns+KPK8oP9v0L7QP4tEX2/0vxFvmrlw15ftVj/hOdW32P/
r47or0b7Jr7XRMLbBjv/81rDd/xvfUT4r4O7yN/tsP2D18OO1+v8Pfb2BsN3
v4rpJ71vhN2fUe/36PtNvqd/uVP7xz7fDM8RfoP1J+l7i/UT8e2C6+hPvNXy
iPwp84/v32Z5p/3erf6I7+2WV+RtVF7s/x1wlftlIvXBO63fvD8bniT8d1m+
yI+91ne8fzfcTfjNykv471Feysu+SPl9LzyIPlr8nvjeZ31B/brf9oD67f1w
r/dzW94J7wOL7V14HlB+9PlB9U35a4vU7x+SkfcgrH/OD/u9+3u0d8rLR8wf
wj9kfhDeRy0/5F/a+gD5P6Y9En6H9Qn8ceWDOyP11SeMH3kOGx/xf9L0eH8I
7PrSp4wfeY5YH/H9p5WX8z7d6pf9bp+Bvd/zqOknPz4LOx/SY31K/nzO9NB+
HzM+0vN58xd5es0Pvv+C4e0Nz+OGhz19Ea7GPvt8D3/J+pP2/IS/x/6+DLfA
/banyPsV8wd5Tlp/oc+vWh/o/9T6n/R8ze87wnMgEt/XLS/oY1CmP/QNyxv7
GU9ZH5I/31Qe0jtk+rCfbxkf+Xta/RD+tw2P+mrY8o7834nUZ2d8T3/lu9oL
6RmJtB/fi9Q/Z20faD+/r3zwOdODvn9gfY2859UH9539UHn4fhTuRP4faT+O
/yPx/1h5O8JzDPa86O9p3973bvmDf9/6H/vPwkO0l39g+SH9Fy2fhP+H2g/y
jcMTfP9H6p/+8pPqm/2wfyzvCTxhet8Q+Ccy9+ldMjzOy/yJ5ZH7DSd9Xxae
f6r98v6y8bE/4s+0p5bwnPL7qvD8c+t79pNeidS3fwGXo4+rkfriLy2PlN9r
1l+0F38V0f+09vy+8Pxr4+P+wKdMD/2VvzG/CW9Ge0Kev42Ux+uGvyc8/87w
S7PPPHIy55P+XvumvNwwP4j/H6yfKZ83Df8d4fmPysv4+5bcFPifDO/14Tlr
fKT/n81fysttf488/2J47Eees3w5/vf3nK+5A3v+5t+0Z8an8/Ag4+t/tz5i
fH3X9ozzQf9h+eP80z3LF9//J7xtIPB9uOjrgf8LHuD9AnwJ/m94L79/Gr47
GPh/zN9vBn4A7/xW4P+FdwwFfqg+vxH4/+AtpwLHzgY+OBz4WXDmu4GXwNtP
B342PI58eXAx8v0UnE/8S+ElyPfT8BDy58MFyPMz8H30sQw+lwn8s/At4i+A
LxD+z8F7kXc5vA/5ngNnOd9dCM8z//Hzys/7FXAD+f8LcBv5XQQPfzXwL8KT
/P4xeAx7+yXY813FcJrz1r8MpzhfthKugX8FXmA+p0T+ROBfhaex/8fNH37/
a3AT80NxuJb7TJ8Lx5lfWQUnPxj415WP+3NLfc/9ob8h8/1q00f9+ptwjPJf
5nvmd35LJr41hve28Pxt7ZP6oBwupD74HX9P/bFWfdPe/65M/ZyAc9SPzzP+
N4XnOuXtCM/nw/Zv1/t76sMXaF+0fxtg73d9oeF5fgOup75+kfqnfdro7+Ph
+WLDp76thEeJ/yWWL/ozm+AW6u+Xmn/oI6m+6I+9DO6j/d+sPKT35bD351aZ
H6TnFcZHe7hF/dB+vxLuYf9AtfaIvK+Cvf9kq+Wf8c+rLZ/0h2oi+n0NPII8
28xvfv9a5ac/UKs+sK/Xqd93h+d25cffxuuVH64zPuzvDYvlMzx3qE/kfyNc
zXi13u/pb7wJ7iJ/dsLe5/pm84P8aVDfpO8t2jP63GV4xP9W+B7xp5SH8N4W
+f1u6x/mP96uvRJ+o/UN+n6H+kKePYaP/O/0e8YjTcZH+O8yP7HHvdr//vB8
t/F1hGez5Z/+0Htk5iP2WV/T33qv8dFfb1H/2Ov7tA/0vx92Pen96sPzOeqb
/vAH/D3pPQA3k74PwnPI22Z+Is+HtEfK/0HD5zzth9Uf9V97pDx/RP1hf4cs
L/TPP6o98j7t78n/j1lekK8Ddv/hx9Uvv++UkecTMvXZYesn8vOTtqfYX5f2
gn4/Bbtf8Yj5gT4/bXqJvxvuRf+fUb+u/1s/wZ81/cTfE5H3c5Z/6odj6ht9
fV77Qx+9fs967hfgUvi49kd99kXzk/T0RernL5k+9HXC/GA8+2X1QX72a7/o
4yvKy/uT1q+E/1W4lvKbsXyRnq/BM56HNv/4/dctz8g3aH6i/29E7PuU8qHv
b6o/7HVI+ag/vgXrX+E07P65b8POVw9Hyv93YO/jPuPv+f671s+kZwRud/1f
ecmfsxF7/b7lhfJ6TvuiPfyB+Y8+zqtP8v+Hxoc9jtqeIO+PrF/4/gn1T/7/
GE7SvxiD56kvfs/wyJ8Lli/y8/dh71/Jqm/S+wfWR9TfF+WO8PxD7dX1f/Ob
7//I9FJ+n/R79P3H2jft/4S8Ozx/Yvkg/kvq0/V/yy88KWPvf2p5oTxfNv3o
68/Mr3eG55T2/87sM48/V579ga/4e/oHf6F8pP9qpH3+S7gY/V8zv+hP/JXx
bQ3hT5tftG9/bfnl+6ci+fk35jfpmTH894bn3yov/ZHrllf08XfGD+fUH/b7
93AF9nbD9MD/YHjkz03lo/7/R8sj8t3SXpDnn6xf+X7W9FB//bPfk97b/p75
w38xP9HfnPnVFJ7/qvyk74766AjPfzM85J33e/Lz39UP9nsXbqX8/of1L/XN
vUj7+Z9+T//wvvGx/vxf1r/k94Ly8v1/K4/+fGD3f/1PJL4H/p70/K/xvSs8
H1qfMf/8f3AJ9Uvs++Gpf9Nnff/R+JfAFejn2XA99pIHd1M//hRci70sNTzG
Kz8Nex4+H050hOfPwN7ntAxuY33gZ2Hv6yqAc8jzc7D99+VwmvnH58CxFwUu
9HvGiz8P91BfrYBvIs8vwM6/FcEt2OsvGj/zWY/BI+T3Lxkf7V0xPEV78svq
C/tZCTuf+SuR8Ev8nvh/1fwkfx83/8iPXzM87CGuPjZnn3k81/d7Aq9Sf7sD
/7q/XxWepTLz/b8hM/+3Wn0yP/GbES5TH+z/+C3Tz/rJGrkxvP9t8/9w4HLt
g/0kv2P8lLe1yk///ndlwktoj8y/PM/vCW+d+qD+en7EvtcrP+9f4Pdrwvcb
5MrALzS+2sAVcIb0v8j3tE8bYc+bvdj37M+v1B6YP3+J8cUCb5JfEJ4vhYuZ
r0kaHvt9XmZ5xH/fZvMLfxsvN/3Yc5XhF4Xfv0JeG55bFstfeL5S3hqe1bD+
jF4lUx62wn3UP682fsb7NdrH7vB8jfnx9vDcZv7RHr3W8ur4X3kT4fk63zMf
td38Yf/Z65Wf+fk6vy8O798gl4bnjoi+3qi+kadepvy8SXkpbzsNj/myN5vf
9PcafM/80Fv8Hv9Pu5QX+3irTH2ckunfvC1iP7vlTeH5duNvCM9Gv98Snu9Q
X5SvPdrTBwK/c7H+Ctxk+C8Lz3f5nvK01/ygfn+36aN9b/b714bne6wfiG+f
8u0N/F5/jz23qH/6I++Dqylv+7V/ytv7TR/ytUbk/cCi/sLzgL9n/9cHF+u7
8GyDRxkPfQjW/9tB5eP9hw2P8tBufK7/+z2/P+T7jvD8KDxE+UrD7i/6mPKg
3w71ib4+bn4yX9Vp+SO8T8ATrv/Djkc/Cbu/vMv26fPh+SnY/d5HrK9ofz8N
O77qNn3k12cW26fsM4+jcn14flb9U9/0ROqnz/n75vD9scXyHPjzi/YeuFd9
4O/uC6aP+f/jcD7rC180vE8G7rO+Yz79S/A08/Mn1A/7L78Mj3wwcL/2QHv1
FeVhveAkXMD+zK9aH7G+kVFe1le+Bq9n/WsAzuP91+Fu3g/C+1jP+Qa8gfWk
U/CS7wT+JryK9aUh+MXfD/wt+Dk/DHwaPgd/G37rDwIPw8/n++/A588GPgN/
DP4u/L8jgUcsX8j7PXgX62VntUfWe74Pz30x8Dntn/z9geGR/+fNX/wP/xBe
YD1yVHsk/360WH4DP6H9sB/4x+YH649j2kdv4N/TPvH3eCHS/v2+9vfC8Mz6
e/z7/oHyMx6+aPmn//SH/p7x1rj2g7x/pH3Sv3jS72mv/9j6hfpgItIe/2Sx
fQrfX5K3Bf4T2PH9pOXF8b/6pf68bP7Qf/4z62v2/04ZPv6+/lz9vDg8r6gP
2su/8D3xX7W+Yzz2l7Dnsa7ZnlAf/pX5SXs2HUn/Xysf/hmfsnwznvkb2yPq
6xnY/YV/qz3x/rr1Afn/d+qP9iEHe97k7+Fm+EakPfgH7Yn+wk3lpT79R/VD
/LeUl/mRf4Ld7zJr/qGffzY/kPe23xP+v6hv8ndO+WgP/9X4GR/dUV7W9/5N
fWMv8+YX7c2/+5727K7hlYfnf6hP+l/3bJ8YL/4n3Et7dt/08f6/bG+Jf0H5
+P1/w33I87T2iz39j/V3R3g+ML/Jz/+1PuD7h3Ad57/+D65kfjp2DvlpX58F
N/Uk/x8wknQb
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.600090038301139*^9, 3.600090063795597*^9}, {
   3.6000949557273993`*^9, 3.6000949658259773`*^9}, 3.6000950501468*^9, 
   3.600096772173294*^9, 3.6001002202445126`*^9, 3.6001003126928005`*^9, 
   3.600100346465732*^9, 3.600100558917884*^9, 3.600100713773741*^9, 
   3.6001007598963785`*^9, 3.6001008139324694`*^9, 3.600100912424103*^9, 
   3.60010105485625*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Methods", "[", "vect", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.600090067013781*^9, 3.60009007625731*^9}, {
  3.600096789848305*^9, 3.600096791344391*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"scala.collection.mutable.StringBuilder \
addString(scala.collection.mutable.StringBuilder)\"\>"},
     {"\<\"scala.collection.mutable.StringBuilder \
addString(scala.collection.mutable.StringBuilder, String)\"\>"},
     {"\<\"scala.collection.mutable.StringBuilder \
addString(scala.collection.mutable.StringBuilder, String, String, \
String)\"\>"},
     {"\<\"Object aggregate(Object, scala.Function2, scala.Function2)\"\>"},
     {"\<\"scala.Function1 andThen(scala.Function1)\"\>"},
     {"\<\"scala.PartialFunction andThen(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcDD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcDF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcDI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcDJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcFD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcFF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcFI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcFJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcID$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcIF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcII$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcIJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcJD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcJF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcJI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcJJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcVD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcVF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcVI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcVJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcZD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcZF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcZI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 andThen$mcZJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.collection.immutable.Vector appendBack(Object)\"\>"},
     {"\<\"scala.collection.immutable.Vector appendFront(Object)\"\>"},
     {"\<\"Object apply(int)\"\>"},
     {"\<\"Object apply(Object)\"\>"},
     {"\<\"Object applyOrElse(Object, scala.Function1)\"\>"},
     {"\<\"double apply$mcDD$sp(double)\"\>"},
     {"\<\"double apply$mcDF$sp(float)\"\>"},
     {"\<\"double apply$mcDI$sp(int)\"\>"},
     {"\<\"double apply$mcDJ$sp(long)\"\>"},
     {"\<\"float apply$mcFD$sp(double)\"\>"},
     {"\<\"float apply$mcFF$sp(float)\"\>"},
     {"\<\"float apply$mcFI$sp(int)\"\>"},
     {"\<\"float apply$mcFJ$sp(long)\"\>"},
     {"\<\"int apply$mcID$sp(double)\"\>"},
     {"\<\"int apply$mcIF$sp(float)\"\>"},
     {"\<\"int apply$mcII$sp(int)\"\>"},
     {"\<\"int apply$mcIJ$sp(long)\"\>"},
     {"\<\"long apply$mcJD$sp(double)\"\>"},
     {"\<\"long apply$mcJF$sp(float)\"\>"},
     {"\<\"long apply$mcJI$sp(int)\"\>"},
     {"\<\"long apply$mcJJ$sp(long)\"\>"},
     {"\<\"void apply$mcVD$sp(double)\"\>"},
     {"\<\"void apply$mcVF$sp(float)\"\>"},
     {"\<\"void apply$mcVI$sp(int)\"\>"},
     {"\<\"void apply$mcVJ$sp(long)\"\>"},
     {"\<\"boolean apply$mcZD$sp(double)\"\>"},
     {"\<\"boolean apply$mcZF$sp(float)\"\>"},
     {"\<\"boolean apply$mcZI$sp(int)\"\>"},
     {"\<\"boolean apply$mcZJ$sp(long)\"\>"},
     {"\<\"static scala.collection.generic.CanBuildFrom canBuildFrom()\"\>"},
     {"\<\"boolean canEqual(Object)\"\>"},
     {"\<\"scala.Option collectFirst(scala.PartialFunction)\"\>"},
     {"\<\"Object collect(scala.PartialFunction, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.collection.Iterator combinations(int)\"\>"},
     {"\<\"scala.collection.generic.GenericCompanion companion()\"\>"},
     {"\<\"scala.Function1 compose(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcDD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcDF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcDI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcDJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcFD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcFF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcFI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcFJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcID$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcIF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcII$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcIJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcJD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcJF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcJI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcJJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcVD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcVF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcVI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcVJ$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcZD$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcZF$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcZI$sp(scala.Function1)\"\>"},
     {"\<\"scala.Function1 compose$mcZJ$sp(scala.Function1)\"\>"},
     {"\<\"static scala.collection.GenTraversable \
concat(scala.collection.Seq)\"\>"},
     {"\<\"boolean contains(Object)\"\>"},
     {"\<\"boolean containsSlice(scala.collection.GenSeq)\"\>"},
     {"\<\"Object[] copyOf(Object[])\"\>"},
     {"\<\"Object[] copyRange(Object[], int, int)\"\>"},
     {"\<\"void copyToArray(Object)\"\>"},
     {"\<\"void copyToArray(Object, int)\"\>"},
     {"\<\"void copyToArray(Object, int, int)\"\>"},
     {"\<\"void copyToBuffer(scala.collection.mutable.Buffer)\"\>"},
     {"\<\"boolean corresponds(scala.collection.GenSeq, scala.Function2)\"\>"},
     {"\<\"int count(scala.Function1)\"\>"},
     {"\<\"void debug()\"\>"},
     {"\<\"int depth()\"\>"},
     {"\<\"void depth_$eq(int)\"\>"},
     {"\<\"Object diff(scala.collection.GenSeq)\"\>"},
     {"\<\"boolean dirty()\"\>"},
     {"\<\"void dirty_$eq(boolean)\"\>"},
     {"\<\"Object[] display0()\"\>"},
     {"\<\"void display0_$eq(Object[])\"\>"},
     {"\<\"Object[] display1()\"\>"},
     {"\<\"void display1_$eq(Object[])\"\>"},
     {"\<\"Object[] display2()\"\>"},
     {"\<\"void display2_$eq(Object[])\"\>"},
     {"\<\"Object[] display3()\"\>"},
     {"\<\"void display3_$eq(Object[])\"\>"},
     {"\<\"Object[] display4()\"\>"},
     {"\<\"void display4_$eq(Object[])\"\>"},
     {"\<\"Object[] display5()\"\>"},
     {"\<\"void display5_$eq(Object[])\"\>"},
     {"\<\"Object distinct()\"\>"},
     {"\<\"Object drop(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector drop(int)\"\>"},
     {"\<\"Object dropRight(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector dropRight(int)\"\>"},
     {"\<\"Object dropWhile(scala.Function1)\"\>"},
     {"\<\"static scala.collection.GenTraversable empty()\"\>"},
     {"\<\"static scala.collection.immutable.Vector empty()\"\>"},
     {"\<\"int endIndex()\"\>"},
     {"\<\"boolean endsWith(scala.collection.GenSeq)\"\>"},
     {"\<\"boolean equals(Object)\"\>"},
     {"\<\"boolean exists(scala.Function1)\"\>"},
     {"\<\"static scala.collection.GenTraversable fill(int, int, int, int, \
int, scala.Function0)\"\>"},
     {"\<\"static scala.collection.GenTraversable fill(int, int, int, int, \
scala.Function0)\"\>"},
     {"\<\"static scala.collection.GenTraversable fill(int, int, int, \
scala.Function0)\"\>"},
     {"\<\"static scala.collection.GenTraversable fill(int, int, \
scala.Function0)\"\>"},
     {"\<\"static scala.collection.GenTraversable fill(int, \
scala.Function0)\"\>"},
     {"\<\"Object filterNot(scala.Function1)\"\>"},
     {"\<\"Object filter(scala.Function1)\"\>"},
     {"\<\"scala.Option find(scala.Function1)\"\>"},
     {"\<\"Object flatMap(scala.Function1, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.collection.GenTraversable flatten(scala.Function1)\"\>"},
     {"\<\"Object foldLeft(Object, scala.Function2)\"\>"},
     {"\<\"Object fold(Object, scala.Function2)\"\>"},
     {"\<\"Object foldRight(Object, scala.Function2)\"\>"},
     {"\<\"boolean forall(scala.Function1)\"\>"},
     {"\<\"void foreach(scala.Function1)\"\>"},
     {"\<\"scala.collection.mutable.Builder genericBuilder()\"\>"},
     {"\<\"Class getClass()\"\>"},
     {"\<\"Object getElem(int, int)\"\>"},
     {"\<\"void gotoFreshPosWritable0(int, int, int)\"\>"},
     {"\<\"void gotoFreshPosWritable1(int, int, int)\"\>"},
     {"\<\"void gotoNextBlockStart(int, int)\"\>"},
     {"\<\"void gotoNextBlockStartWritable(int, int)\"\>"},
     {"\<\"void gotoPos(int, int)\"\>"},
     {"\<\"void gotoPosWritable0(int, int)\"\>"},
     {"\<\"void gotoPosWritable1(int, int, int)\"\>"},
     {"\<\"scala.collection.GenMap groupBy(scala.Function1)\"\>"},
     {"\<\"scala.collection.immutable.Map groupBy(scala.Function1)\"\>"},
     {"\<\"scala.collection.Iterator grouped(int)\"\>"},
     {"\<\"boolean hasDefiniteSize()\"\>"},
     {"\<\"int hashCode()\"\>"},
     {"\<\"Object head()\"\>"},
     {"\<\"scala.Option headOption()\"\>"},
     {"\<\"int indexOf(Object)\"\>"},
     {"\<\"int indexOf(Object, int)\"\>"},
     {"\<\"int indexOfSlice(scala.collection.GenSeq)\"\>"},
     {"\<\"int indexOfSlice(scala.collection.GenSeq, int)\"\>"},
     {"\<\"int indexWhere(scala.Function1)\"\>"},
     {"\<\"int indexWhere(scala.Function1, int)\"\>"},
     {"\<\"scala.collection.immutable.Range indices()\"\>"},
     {"\<\"Object init()\"\>"},
     {"\<\"scala.collection.immutable.Vector init()\"\>"},
     {"\<\"void initFrom(scala.collection.immutable.VectorPointer)\"\>"},
     {"\<\"void initFrom(scala.collection.immutable.VectorPointer, int)\"\>"},
     {"\<\"void initIterator(scala.collection.immutable.VectorIterator)\"\>"},
     {"\<\"scala.collection.Iterator inits()\"\>"},
     {"\<\"Object intersect(scala.collection.GenSeq)\"\>"},
     {"\<\"boolean isDefinedAt(int)\"\>"},
     {"\<\"boolean isDefinedAt(Object)\"\>"},
     {"\<\"boolean isEmpty()\"\>"},
     {"\<\"boolean isTraversableAgain()\"\>"},
     {"\<\"static scala.collection.GenTraversable iterate(Object, int, \
scala.Function1)\"\>"},
     {"\<\"scala.collection.immutable.VectorIterator iterator()\"\>"},
     {"\<\"scala.collection.Iterator iterator()\"\>"},
     {"\<\"Object last()\"\>"},
     {"\<\"int lastIndexOf(Object)\"\>"},
     {"\<\"int lastIndexOf(Object, int)\"\>"},
     {"\<\"int lastIndexOfSlice(scala.collection.GenSeq)\"\>"},
     {"\<\"int lastIndexOfSlice(scala.collection.GenSeq, int)\"\>"},
     {"\<\"int lastIndexWhere(scala.Function1)\"\>"},
     {"\<\"int lastIndexWhere(scala.Function1, int)\"\>"},
     {"\<\"scala.Option lastOption()\"\>"},
     {"\<\"int length()\"\>"},
     {"\<\"int lengthCompare(int)\"\>"},
     {"\<\"scala.Function1 lift()\"\>"},
     {"\<\"Object map(scala.Function1, scala.collection.generic.CanBuildFrom)\
\"\>"},
     {"\<\"Object maxBy(scala.Function1, scala.math.Ordering)\"\>"},
     {"\<\"Object max(scala.math.Ordering)\"\>"},
     {"\<\"Object minBy(scala.Function1, scala.math.Ordering)\"\>"},
     {"\<\"Object min(scala.math.Ordering)\"\>"},
     {"\<\"String mkString()\"\>"},
     {"\<\"String mkString(String)\"\>"},
     {"\<\"String mkString(String, String, String)\"\>"},
     {"\<\"scala.collection.mutable.Builder newBuilder()\"\>"},
     {"\<\"boolean nonEmpty()\"\>"},
     {"\<\"void notify()\"\>"},
     {"\<\"void notifyAll()\"\>"},
     {"\<\"Object[] nullSlotAndCopy(Object[], int)\"\>"},
     {"\<\"scala.PartialFunction orElse(scala.PartialFunction)\"\>"},
     {"\<\"Object padTo(int, Object, scala.collection.generic.CanBuildFrom)\"\
\>"},
     {"\<\"scala.collection.parallel.immutable.ParVector par()\"\>"},
     {"\<\"scala.collection.Parallel par()\"\>"},
     {"\<\"scala.collection.parallel.Combiner parCombiner()\"\>"},
     {"\<\"scala.Tuple2 partition(scala.Function1)\"\>"},
     {"\<\"Object patch(int, scala.collection.GenSeq, int, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.collection.Iterator permutations()\"\>"},
     {"\<\"int prefixLength(scala.Function1)\"\>"},
     {"\<\"Object product(scala.math.Numeric)\"\>"},
     {"\<\"static scala.collection.GenTraversable range(Object, Object, \
Object, scala.math.Integral)\"\>"},
     {"\<\"static scala.collection.GenTraversable range(Object, Object, \
scala.math.Integral)\"\>"},
     {"\<\"scala.Option reduceLeftOption(scala.Function2)\"\>"},
     {"\<\"Object reduceLeft(scala.Function2)\"\>"},
     {"\<\"scala.Option reduceOption(scala.Function2)\"\>"},
     {"\<\"scala.Option reduceRightOption(scala.Function2)\"\>"},
     {"\<\"Object reduceRight(scala.Function2)\"\>"},
     {"\<\"Object reduce(scala.Function2)\"\>"},
     {"\<\"Object repr()\"\>"},
     {"\<\"static \
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom \
ReusableCBF()\"\>"},
     {"\<\"Object reverse()\"\>"},
     {"\<\"scala.collection.immutable.List reversed()\"\>"},
     {"\<\"scala.collection.Iterator reverseIterator()\"\>"},
     {"\<\"Object reverseMap(scala.Function1, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.Function1 runWith(scala.Function1)\"\>"},
     {"\<\"boolean sameElements(scala.collection.GenIterable)\"\>"},
     {"\<\"Object scanLeft(Object, scala.Function2, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object scan(Object, scala.Function2, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object scanRight(Object, scala.Function2, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"int segmentLength(scala.Function1, int)\"\>"},
     {"\<\"scala.collection.immutable.IndexedSeq seq()\"\>"},
     {"\<\"scala.collection.immutable.Iterable seq()\"\>"},
     {"\<\"scala.collection.immutable.Seq seq()\"\>"},
     {"\<\"scala.collection.immutable.Traversable seq()\"\>"},
     {"\<\"scala.collection.IndexedSeq seq()\"\>"},
     {"\<\"scala.collection.Iterable seq()\"\>"},
     {"\<\"scala.collection.Seq seq()\"\>"},
     {"\<\"scala.collection.TraversableOnce seq()\"\>"},
     {"\<\"scala.collection.Traversable seq()\"\>"},
     {"\<\"int size()\"\>"},
     {"\<\"Object slice(int, int)\"\>"},
     {"\<\"scala.collection.immutable.Vector slice(int, int)\"\>"},
     {"\<\"Object sliceWithKnownBound(int, int)\"\>"},
     {"\<\"Object sliceWithKnownDelta(int, int, int)\"\>"},
     {"\<\"scala.collection.Iterator sliding(int)\"\>"},
     {"\<\"scala.collection.Iterator sliding(int, int)\"\>"},
     {"\<\"Object sortBy(scala.Function1, scala.math.Ordering)\"\>"},
     {"\<\"Object sorted(scala.math.Ordering)\"\>"},
     {"\<\"Object sortWith(scala.Function2)\"\>"},
     {"\<\"scala.Tuple2 span(scala.Function1)\"\>"},
     {"\<\"scala.Tuple2 splitAt(int)\"\>"},
     {"\<\"void stabilize(int)\"\>"},
     {"\<\"int startIndex()\"\>"},
     {"\<\"boolean startsWith(scala.collection.GenSeq)\"\>"},
     {"\<\"boolean startsWith(scala.collection.GenSeq, int)\"\>"},
     {"\<\"String stringPrefix()\"\>"},
     {"\<\"Object sum(scala.math.Numeric)\"\>"},
     {"\<\"static scala.collection.GenTraversable tabulate(int, int, int, \
int, int, scala.Function5)\"\>"},
     {"\<\"static scala.collection.GenTraversable tabulate(int, int, int, \
int, scala.Function4)\"\>"},
     {"\<\"static scala.collection.GenTraversable tabulate(int, int, int, \
scala.Function3)\"\>"},
     {"\<\"static scala.collection.GenTraversable tabulate(int, int, \
scala.Function2)\"\>"},
     {"\<\"static scala.collection.GenTraversable tabulate(int, \
scala.Function1)\"\>"},
     {"\<\"Object tail()\"\>"},
     {"\<\"scala.collection.immutable.Vector tail()\"\>"},
     {"\<\"scala.collection.Iterator tails()\"\>"},
     {"\<\"Object take(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector take(int)\"\>"},
     {"\<\"Object takeRight(int)\"\>"},
     {"\<\"scala.collection.immutable.Vector takeRight(int)\"\>"},
     {"\<\"Object takeWhile(scala.Function1)\"\>"},
     {"\<\"scala.collection.IndexedSeq thisCollection()\"\>"},
     {"\<\"scala.collection.Iterable thisCollection()\"\>"},
     {"\<\"scala.collection.Seq thisCollection()\"\>"},
     {"\<\"scala.collection.Traversable thisCollection()\"\>"},
     {"\<\"Object toArray(scala.reflect.ClassTag)\"\>"},
     {"\<\"scala.collection.mutable.Buffer toBuffer()\"\>"},
     {"\<\"scala.collection.IndexedSeq toCollection(Object)\"\>"},
     {"\<\"scala.collection.Iterable toCollection(Object)\"\>"},
     {"\<\"scala.collection.Seq toCollection(Object)\"\>"},
     {"\<\"scala.collection.Traversable toCollection(Object)\"\>"},
     {"\<\"scala.collection.immutable.IndexedSeq toIndexedSeq()\"\>"},
     {"\<\"scala.collection.GenIterable toIterable()\"\>"},
     {"\<\"scala.collection.Iterable toIterable()\"\>"},
     {"\<\"scala.collection.Iterator toIterator()\"\>"},
     {"\<\"scala.collection.immutable.List toList()\"\>"},
     {"\<\"scala.collection.GenMap toMap(scala.Predef$$less$colon$less)\"\>"},
     {"\<\"scala.collection.immutable.Map \
toMap(scala.Predef$$less$colon$less)\"\>"},
     {"\<\"Object to(scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.collection.GenSeq toSeq()\"\>"},
     {"\<\"scala.collection.immutable.Seq toSeq()\"\>"},
     {"\<\"scala.collection.Seq toSeq()\"\>"},
     {"\<\"scala.collection.GenSet toSet()\"\>"},
     {"\<\"scala.collection.immutable.Set toSet()\"\>"},
     {"\<\"scala.collection.immutable.Stream toStream()\"\>"},
     {"\<\"String toString()\"\>"},
     {"\<\"scala.collection.GenTraversable toTraversable()\"\>"},
     {"\<\"scala.collection.Traversable toTraversable()\"\>"},
     {"\<\"scala.collection.immutable.Vector toVector()\"\>"},
     {"\<\"scala.collection.GenTraversable transpose(scala.Function1)\"\>"},
     {"\<\"static scala.Some unapplySeq(scala.collection.Seq)\"\>"},
     {"\<\"Object union(scala.collection.GenSeq, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"scala.Tuple3 unzip3(scala.Function1)\"\>"},
     {"\<\"scala.Tuple2 unzip(scala.Function1)\"\>"},
     {"\<\"scala.collection.immutable.Vector updateAt(int, Object)\"\>"},
     {"\<\"Object updated(int, Object, scala.collection.generic.CanBuildFrom)\
\"\>"},
     {"\<\"scala.collection.IterableView view()\"\>"},
     {"\<\"scala.collection.SeqView view()\"\>"},
     {"\<\"scala.collection.TraversableView view()\"\>"},
     {"\<\"scala.collection.IterableView view(int, int)\"\>"},
     {"\<\"scala.collection.SeqView view(int, int)\"\>"},
     {"\<\"scala.collection.TraversableView view(int, int)\"\>"},
     {"\<\"void wait(long, int) throws InterruptedException\"\>"},
     {"\<\"void wait(long) throws InterruptedException\"\>"},
     {"\<\"void wait() throws InterruptedException\"\>"},
     {"\<\"scala.collection.generic.FilterMonadic withFilter(scala.Function1)\
\"\>"},
     {"\<\"Object zipAll(scala.collection.GenIterable, Object, Object, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object zip(scala.collection.GenIterable, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object zipWithIndex(scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object $colon$bslash(Object, scala.Function2)\"\>"},
     {"\<\"Object $colon$plus(Object, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object $div$colon(Object, scala.Function2)\"\>"},
     {"\<\"Object $div$colon$bslash(Object, scala.Function2)\"\>"},
     {"\<\"Object $plus$colon(Object, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object $plus$plus(scala.collection.GenTraversableOnce, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object $plus$plus$colon(scala.collection.TraversableOnce, \
scala.collection.generic.CanBuildFrom)\"\>"},
     {"\<\"Object $plus$plus$colon(scala.collection.Traversable, \
scala.collection.generic.CanBuildFrom)\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.600090073164133*^9, 3.6000900766403313`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Read by point", "Subsection",
 CellChangeTimes->{{3.6000904318366475`*^9, 3.6000904570830917`*^9}, {
  3.6000943478316298`*^9, 3.600094353567958*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tempPoints", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"nounou", "@", 
      RowBox[{
       RowBox[{"data", "[", "]"}], "@", 
       RowBox[{"readPointAbs", "[", 
        RowBox[{"0", ",", " ", "#", ",", " ", "0"}], " ", "]"}]}]}], "&"}], 
    " ", "/@", " ", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", 
      RowBox[{"512", "*", "10"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6000852384596033`*^9, 3.600085244552952*^9}, {
  3.6000892650139093`*^9, 3.6000892834449635`*^9}, {3.600089342198324*^9, 
  3.600089343335389*^9}, {3.6000900166909027`*^9, 3.6000900179779763`*^9}, {
  3.6000943569791527`*^9, 3.600094397209454*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "tempPoints", "]"}]], "Input",
 CellChangeTimes->{{3.6000900226142416`*^9, 3.60009002923062*^9}, {
  3.600090061450463*^9, 3.6000900616744757`*^9}, {3.60009440308179*^9, 
  3.6000944046648808`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1: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
ku5/zsXaxg==
      "]], 
     LineBox[{{312.1760435571688, -114.90215250000003`}, {
      313., -101.04675350000001`}, {314., -106.02126900000002`}, {
      314.62987012987014`, -114.90215250000003`}}], LineBox[CompressedData["
1:eJw9lA9MlHUYxw8UQ4k6rXEtwEASRC65LkwUha+O8ccIr8tLDyGoITpKuXXv
v0PFC1H5Y4hFCQl0aFTeKo8/F4Gwuwa5UWswpmAieWoQDvEwmohCf9zvWe/2
7t1n7/t+n+fzPO/e4LfztDs9ZTKZ/r/z0bWz/7PmQIcRqa6B4Y62dKfs0eE0
ovo1ZWvUF8R9Rrh/rp4obdnG2GXERcvupUh+g/GkEcdm2urDl+gZyzhk8IHW
s/47GMs5NFyvbDOFEAdxKJXGZ4c2pTFWcUjL7bw2ZqU8cPjUnBmS3KlhrOEQ
YWjyvapLZZzFYZnu6XNNx3WMDRye3epfU1xF/Zo5BFy6hYFdVK+CQ+TI/sbp
x7cytnBYW7Ry9b6xVxnbONw4GPFrYzSxk0Poh2M7KzOofh+HKe+9n79bqCV/
DrqAx958wUU8ySHGe13apTnqT8bDnCN/7nJqEvnzOF0X63mw5xXy5/H+qR/L
vP6kfBWP9O8GFAsHU8ifR0p5TMMhj03kzyNHHdC7azHIn0e+/imf/XEJ5M/D
p03bW2hNJn8e7oVLhobDE8mfh9y+5xmvTsqz8IgTC+cGV1Cejad5Ezt5FGzP
u7ioaiP58/hoQav9cHAM+fPIarqbVXZrOfnzyG4pt4YWTzmYv4BWZebJ69Ny
8hfQ4Lc59MsLIeQvoMOecuTm3WDyF/Cg5nxG5ISC/AVkRtSff758GfkLyE68
qXE8jCR/AXeerBy6Z48gfwGjktfpMK+/4pi/gJ96ur8pLHoRzF/Alk/S3GuU
UYwtAm64Fc3LfUIY2wRYghqHN+Aa698pQLocn7PKMM24T8CJw2PyaO0sy3cJ
ODU/L+lMvwd7f1LAbY+pivB/qL5MRKujeUP+O4HsvlxE49mpr+6XUP0gkfLX
MFaJuDpTkNtR9ARjiJhTeHtmq9TkL+LI7Y4PfvEMI38Rec4/ji6eVLHnDSLy
R0dsD0NjGZtFfB20oP3e8ZfIX8SBt9Q6Ve4K8hexI3z+eyVu6scmwh47UqWs
ofedIpamrxtd30XcJ0KZq/Lt6lnL2CWieE+Z2r9/NfmL6E7QO6r9iGUSvm8+
tz7pdcqXS7TfMPKXcGz2QfDL28fZfFUSzaOVMSRUH7Kc0c2j/jUSFNoC7cQM
9ZMlwTNq88m/ayPJX4JxyzZRKfix+ZglDBpO7Gsv9WVcIdH3Sfu2SOAz7v8w
o6T92CTav5vtzykhNr/rwO971eQvIew3j7qWkgTyl/BxUfyVC9ZE8pfgaF+p
KRvYSP4m5ETX9Zpr48nfhNI7+sHd9cRBJrjnVVzprlU77ePCt4tWmf7///4L
tFPLjQ==
      "]], LineBox[CompressedData["
1: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
O5iVO0WDngC7RNO5sxW7I6LwvVs0dR2+9PlOA38/R5Pk2ritvt/he89ouvzk
xJXAI6CP3tF4rwL7RtPyXev9Ny7B7/2jKSfmnwErpmG+AqLpXYGv4VwicFA0
rS+/H9u9CfUHR/P3BMOSaCrsOLPHjEOoLy6aTlfcu3O9EFgajfcN5lMeTZ5J
BYsbVtgyrIzGe7Mfw8ZoetZ9+MB0H9Dr4mjQS3xfGg3+0L78f7g8mlaN/Xt2
8p1BDFdGU/rW+m7txwxguDpafC/URuO9jPNVF03JL4I//bhqJMMN0VQTsHF4
e3/Qv6Zo8PugVy3RnD9m2CIG/CHog1WM+J6wiSGfTzxvjR4EemsXQ4PuV/S7
vhjvMYcY0AO895xiSN116I1neZz+x+A+xHvXLQb87+cMUwzuJ9Abzxh62vuX
gT/XoX7vGJqR/W5g0SXQO98YervTz9iqAT31N7XftfsowzXQv4AYiqzPn/RR
LehxUAy/7xgOjqGp7WYdDO+A/kl4Oeh9XAwNmHNpmH4a7gNpDBllV6c3zEa5
PEa8f5Qx/P3EsDEG9BXyhOIYft4ZLo0BPQI/Vh7D6QfDlTFU3F/TNn0Y+lcd
Q33OeL6w2of1qI0R3391MWQxqMhr+H0rrH8MJTe9cLAk7JemGP4+wvrHiPIo
i1jQ3xcMW8VCPvKG1W8TC37oP4btYs34v1jS5+f+3qU/6KtTLPhznFeXWJoq
V/v12Ybz5hZLz+Xh51r2gh5RLOgp6K2nqT9Kpe3u6/z8x9IBt2/lPW1Aj3xj
+X5j2D8W9yd+HxBLqRtOnfqmG85vUCxtNMFfa/j5j6XWjJYbHfuiXBJLj3dI
DqyJ4+c/lpYY0rLOBfPzH4v3AbA8lu4E3Vvw43VgZSz98ln4H6N7AhtjSf5e
GvbmEXAxnz/Qo9JYGrxqzqS+d6cxXB5LG/48O+dhI3BlLH1tOU+zwMaT4epY
rBen/2b11cWK9LQhlsKbVB4zmjDfTab52NR+ytJ5kMe2xNKswo+DlryDPNYi
js4trL3UdT/kr1ZxlBV24trufvjeJg73L+4zuzhKbLO9/+x6Lh+Mo6RXv6oG
90D/neJolnpp0/ceMxl2iYN8GPW7xZFnuoPfB08wPoqjT+ZuWdX7KcbnGYfz
C37YO44ehKgfntBgfL5xVFaa3L5pFMr94+iL9V2vrtmD9gPiaKfu1w9PeAEH
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
n3nZLUZ/JSmQp3H9TwqXPzMsTaHq1ZfvrzmO8yJPIZXt7hudneYzrEyh4vs/
ZM14j/UyptCOuxNCEnZg/MUp4numNIVKDsmenyL0tzyFYramfjnzAfZ7ZQod
Pbv+z7OuaK86xYz/N8N1KXRufvbcNoH8/jeN987Ry2M0nP9LoaCpbp8Hz+Dn
P4UebL/zw4V/cT9apFLfGb59vz2N761SqXzq2/86HeX8fyo5r3HpcvIssF0q
VV9rM/HhNb7+qTRm23cl83px+p8q8mcuqXRpXfPwTxqx391S6bH13MUP1nP+
L1W0N/JMhTydv/9Saf/I07OCN3D6n4r9jv3jn0p/Ge4Mj6zC/AekivxzUCrs
OdBecCp9cTd030trvv6pZDdp9J978tB+XCo9tHTtPnIyxiNNFd+D8lR6p71u
uNOb8/+p9NWzrafm2uN8GFPF+S9OpUUjzjzbcxzrXZpKHhZBjdf6o3/lqSK/
WJlKw18sDf2zI1//VJG/r02l1C1TT6/J4/e/WfsNqVR6sKnMJ4ef/1SaHFue
RmF8/VNxP3H5r5RyJcsGTPsN2FJKFdNyv9b7oT0rKZV5qpxDV2E9raV0bOaO
FwOmA9tIqc+5+M0fvkR7tlJR/mAnpVTLPoEPIoDtpaL9kIOUPO33h2+Soj5H
KY2LORPWKxbz5SSF/h/9d5bSrUch3ycEYvwuUugXsD9cpfS627+H9rbj9EYq
7h93qShPJylF3L91cmA/YA+pyA95Sum904OqcZ+jP15S2nazv8sVH3zvLSWv
NNMDbyr65yMV3/O+UsivUJ+flA6Vbfxt7UDU5y+ll7n9bGWzUL7SbPwBUupw
+EW75m8wP4FSur1j6LV9btgfQVLxPbNJSoOf3AlIiYF8JljK7V8YDpWSJnNb
+MKXfP9L6cw3v8YvisX5iJLS+cU/fbzTGzhOSu6tXy3U3MV8J0lp68UTqz6s
n8iwVAr5NLDMtL6RSs28tjhPcil9P2bsR/buKFdIaYhf6on/eqBcKaXoJ2+7
XPdEe1opfbrcrrjegPEapSL92SWlLrtnnfdOx34tlor2CCVSany3z+bjX9Fe
qam+8yc7erkCl0lF+V+5abzzntunVWA+KqRkte/L6PM7sL6VUlFeUyWlSW33
Bd4LQP+rpbRrwNQxba+gvEZKI7eeW3N4C/pbK4X9INbzhlS87+qkpP2ki6FK
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
93+R6D8zrEi8X12KRH5tRBHZhQWN/+8c6nMtQvwO0IeRRfAvBP/vVkSqOQPP
Lc3HfI0pgr83vncvoj2ug9vdvMjl/0U0NGh/lxvzgKmI+yszPNE0vyP7Dh1+
nL//TfPnqV0bupzf/0V0bbnX623O/P4vwnsG+WenF8GfBvlsvYoQfxX5ZGcV
wd4b/fcugj041ndOEc25VqwfEQPsU0StvsfXn3wIPL+IykI+/Cj/BH7vW0Rn
ZoyKn/CGy/+LYO+E7/1Mv58neXJQh/Vb+v+6uu7wkK43rLY0Qo0gZs3YatX2
1Z6x0thbCUIJQjWCVNWMHStmFXefgyqqxKhqSsROVYlNahVVRfnd53ff0+f5
7p/vc+899+zxne97X42uZDa8N60ing/S6OnJ+h9W7KHO/xrtrn1t5csvgIdp
iAcAHq5xvd1IDfrVwKN8z6M0zF/4fqwGfWnkd5wG/SE8j9Zg78fziRoNehCa
eroo8hujIR4G9T9Fg74Pnk/V4N+J9GJ99R2nIT4F78/QEL+K9+M1qtC/zj/D
96G9ZmkUs9SqUSkNz2dr9CC5YbmUlvh+jtu+6acbhHdD+vM0at1pbvmXYfh+
gUZLP3pY9kRX9IcEjYZ91rNpRi+lH63BPxblWapxvezlGn3b7Naqaknor4ka
4g3x/iqN5lsbR+a5DbxG4/N1ksb3X+s1xE/29vBGTfHle3izRj0GvdNp9TXk
b4tGH9rTL94JUeu/b37YrkEfHuXXNSoy60mzoJ5Kr1qj9yb/VWVHW/zf1ng8
pNC4fWmHRicTzXmPp+P/uzTs16GvvVujsEvhv39dHfW5R6Pl/z6tO6gL/r9P
gz8Y/rdfo6gWfYamDcfzAxodznL4q6UxSv/aHX9/Vqqy9rg6/2v8PHlUA7+e
Ov9rXO/4uK//pmh0dmtmqd7nkd8TGmW2fhC3IgvqO1WD/xXqM819vifk18LF
kN4ZDf66SO+cRn920Qrc+hnlvaBRzrG/nzxbAThdg74N6uuSu56Mb/C0ag1l
/9do28qivzxbgf9d0WhZ46iyO4+iPBka9br3sNHa39Bfr2vgu0f+b7r9c1H3
PKd+Qv5va+CDxP/uavz+MVODfRf5v69BHxj5feiOv/zv2yVWAj/WaOhfbYvO
bon3n2ikXxob/+gR6uOZm/7iKvMuPgV+roGvG/l/ocG/Gv9/qdZnpPdaowb1
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
lx9a/Hz7WOUf5+MnFr/PfGZxf7PnFvg9lf+fBb5Ndf63qL5M7vlsEPBri/sH
vrHAb4X6yWLjPhz72aw25z/ObtORLiXo4F0V/2dT61nT36vbQJ3/bX5+DrDB
P4H0A23Es2C/EmRTE3e7mbgB/8tvc//LAjZv30I216sMtuE/Dj6SojbnLwix
eX8oYSO+Df8rZXN95TK20h9I/j8ua+M8ksvD5W2lV+u9X9GGfyf8WUNtzt9S
xQa/CvShqtl04MiDNLE9t4dr2LQ2+6ftvj4DPdpattIP876vbXM9uro27DGK
/8/mensNbOgJgY+lkc31opvYdPL0jb/rO4r/3+Z8XGTTtjW9O75zGe3dwsZ6
ivK2suGfgf1MGxv+q3jezub8AR1sujxydKtaPZFeJ5vzTYXZ/HzW1UZ8I+qz
u2pvtF+4zfm7ImzMT0pf3eZ8Gn1s+A8gP/1szn84wOZ8p4NstV/w8BCb1gcm
LO35L+prmM3Pe8NtWvdl0wePNyE/kTatDv6r/cMY8NGNsjnfaJRNo46eaLbo
d/x/rA09MtT/OJuvJ9E25zudaNOybDH1PvsN+/8Ym9tzp9g8fmaq2357oyam
Rin7v414aeQ3zubxTTNspe/i4Xib26dm2XSlwviIox8r+7+t9F88PMedL0rs
mDlxMfIzz6bINs1DwsJRvgU2jx9JsPn5Z7GN+HvgpTbWe7y/3Ob8VIlu/exp
PPrDmyr+z6ZuV2tv61gA9to1NrfXJtkUsyjKDpmn/P9s7m+40aaJQevznNyn
7P82zRPX7hWuhvxssbm/ylab28u32zy+R3fnl6qF7r0xlf+fze2ftk3h/ZN/
WbAW/xM2+AiU/d/m/k27bG5f3G1ze/IeNV+o+3+byl+43iPLQDzfb3P/ugM2
j29JtrEfxPp72Ob+HEdtfl9/zKbn5z+eeWka6ve4zeNTU2weH3zC5v4VqTb0
OfB9mk23477aTEuQ/hmb5tQs2Pp4P5TnnM39rS7Y3P893abXy15czlMc+JLb
v9bkEu3moL4u2/S2/4aGo9Pw/RVb6T95OMM3nq7bPH72ps3tF7dtWrgnS92U
COT/ro14PeBMmybMS7gZ/Y06/9s8nuOhzfeXj93vG4YO3hqv4v/d8Zp14Onq
hZX/n839SZ77+t8LG3z5eP+lzc/Tr9X8qOL/bepyekm/uL54P4vD7w+yOuC/
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
/vVwN0k1b8XKvwNRn90l3x/0kPy8Hi65fsHHkvvjR0iu19VTcv+MXhLx4Oi/
vSXXP+kjVTyIh/tK3LcjvX6S62n1l1TkYGUzfDbqd4CkkfRDsXrHkf+Bbn1N
qJQ+vYzyf5Fc72awRHwe+ssQyfUdh0quHzxMcv/CTyT9fCJHjUUpyl/GNx+M
cOv3euMP/jiG/EdK8DkDj5RqvfXwKMnPp6Ml4hGR/yjJ9/NjJD+fj/WN30+l
Wi89PE5ye+J4Cf5jzK/REnrnmF8nSNq4eN13sgDGw0RJ4WXnDmgThfQm/bfe
eThG0i5Z4Km5C/U5WcK/TOl3+ub3zyTXn58qOT/n52o9RHliJfyJ0H7TVPug
/HGS2/unS+7/N0Nyf9yZkusNxUtu//1C4r4aeJZvvvpSgu8X+Zktuf/aVxLx
7fj/HMnvl+ZK7v80z11/tu4Ivd8S/5svEc+tzv+S60ctlFzfM0Hy+9JFkttD
FkvEn6J9lkjwx2P9XiphH8J8sUzSu9VmVM52ROmTSprQpefkajH4foWE/2cx
DydKft+wUoLfEu2zSiL+DPPnaol4ZdjD10h6EH+o3uRU9L+1Ev7VwEkS/oiI
B1wnud7Tesn9MTdIruew0d0vTN/UdkEP1O8m1f+wv9ns+9/XEnzoqI8tksdr
faP2fzk9vFXCfo722Sa5XuR2CX1r9B9Nwj8P7atLrn9rSK5vaEpuf7N885kt
wfeC/YojEU+B8gjf+iF9888OSQG1s1Yp0QX1uVPCnoX90y7JzzvfSqVH5+Hd
kpq8jfnVqYr943eS6/vukfROydu/vFsY9b9XQk8OeJ/v/99Lbo/cL3m86A+S
3oZmnmhaXem9SG5/PCj5eT1Z4j4J68chyfUyD0t+v3hEUtdlxT6tehv/Oyrh
L4P3f5Q4z6G8x9T8DX/Yn9T+Fee545L7r/4suZ5eiuR6b79IxHNA3/CEmk8v
evv3k5LrH6ZKHh9xSu3HEK+QJnG+fup9f9rdj50ZM7ffcsQLnvHNt2cl+K5R
H+d888V5CT5h9K8Lkut9X/TVf7raL+D+8VfJ9QMvSa5n95uE/yTSu+xbn3/3
jccrUp2nPXxVlfesd/7IUPu3PN7za5LHP11X8xn+f0NyPeebEvH60Fu8pfbb
OH/fllwf8o46r0Bf8K7EeRnlv6f2p/DvzpQ8/uMPlT78Xe5LHu/0QELfEPE1
DyWPv3kkaWf1bKndNyA+57FUeuke/lMqfzYPP5GKb9bDTyWlRKzskTUK8UHP
JD+f/yUpJOuMoV0yEB/8XCp+OQ//LRXfhYdfuP03f+Mekb2B/5EqHsHDLyX9
0Xx0XOzEcA+/UvuzCA+/lqTd+CBb4cO9PPyvO963zAmserSnh9+o9RLfv3X3
x3sP5Psq+WMPZ9mh+KiSowqMb9TJxWEZF37fv7df8v8AyqBXDQ==
      "]], LineBox[CompressedData["
1:eJxdmXdcz9sbwJNKypZSGS1Kg5IW4ilJWqKMiIoyCtl775GsUELoCjfj9hzJ
iHIpXDOVca8oq4wo2fN3fp7n4/Wq/un1fp3zOec5zz7nazwyZkCkqoqKyv46
Kir//19yMgOj6iD4l9wuzjoZkqPy/z9VhNEqBx55HgsmrovQR3O9Y5xfILEa
QvfP7+5uTWZWR8jxyJr+Y+ZgYg2E9d2bBJuNH0JcD2GEnWmWqwGPayL8W74j
+dHKgcT1EdSf+BwIWzaAWAvhQPwd7/J+AcTaCLPjvWf9PZH3a4DQ6fCKC2dM
Wb6GCD16N2qaeYW5EYJHrvPCzdU8vzFCgKnNlszmvsRNEN42tWu3KagvcVOE
wrFT7DTCfIibIdx4lPt3k0M8vznCzdFFZVHn/Ih1EP7s5NPN4bU/cQuEc9f9
kibr87guQiOnkurz9p7Eegg/raz8vKe6EreU4+cm6zsVdSPWR8jK8F3xuMqN
2AChnvne0GEPmA0RetbbahoxqCtxK4T2Q9/OGjrNgbg1go5HcT2jXs7EbRCG
dloxZe9cF+K2cr8uyVMzK+yJjRCCj2ReCzpkSWws7TWzT15UUjtiE4Rj6c2q
Dx1rT2yKUJ2w+J9PR62JzRC2zl0cvOeuLXE7hKMW7dTSTvH37RGezVLfa67+
rucvNkcItdpz2ixOFX6xBcKjN3qinbYpze+A8KH59Yk21byfpbJ+E5pvJfdX
tzEL625LbI2g5/utf+EES2IbhJNdVR4dOWJO3BHhWv7jj45H7Yk7IVzy+qDp
kNGZ2BZhwK7ZLq8G6RLbIai0P+hrV6ZJ3Fnqb6+4ahJvR2wv9ZEZX50L3Yi7
ILyqU72hw88uxA4IbqsiLqW360DsiOC64uIC3ZVWxE7K+Xl/Z4SYnLKVTSv5
PC4IpUvGB59d0Ja4K8Juo/RiV7hB+uuGYBNxpMGfri1ovDvC04+O3+85OBC7
IqyYvd7e70UP4h4I027vb7U534W4J0LeRfOIsqesD0A4e77i5l8HnIndEKqk
OdJKXIndZfyZvZw0bX5X4l4IZ7rvtPL24/08EFT3vK+MtOT1eiMsnTzpeUK2
NbGn4t+GxH0Q5v1bevRyo3bEXgi99Qozr6axvH1l/B8aeLp9Uh9ibxkPJ9Zp
VDp5EPsgHO9cuu3LUt7ft5Z+/RA2zX7SWKMry+OPcOfx2aKuKTy/H8Lt53A7
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
IUvp
      "]], LineBox[CompressedData["
1:eJxd1HtQ1FUUB/AFBx9DKsPLV5sypkGAsiwtKhRfFgWxJYJ00gRnYHBgoNIG
lJnGlCln0mkripLAoJJCcSRaDy4QCosaDzeNVyjBtujGwvqoeMPKo5Vz+aff
zG9+85nfveece8/9/TwSD8Tut5dIJK/Z7idPty82jerLCK/0dBguV8XpJE+u
nwg392kLtKf2sjWEqkOB0SOGneyLhPY00jgXR7GJcD0yP6Q4LoJdTjBm6JcM
NGxnXyK09hWpK7NVbC1hmWoypv2tHewKgrMi+EqsOpRdSQibp3nTnCJnVxE+
G3dLq0wNYP9MOJu7XD/8pZJdTSj+tuvllSmR7MuE+POt7rdrwthXCMvbVGNb
mqTsGkKhs1POwZOemHUtIT369Uyfw+aQWets9e6MNq+W+vH4OkK5xnnoQrk7
+yphvqKvJy/Yl+dfI1i/ro7f+GgZ+zphY+8RzdhTot5fCCeSF/nbh8vY9QS7
0omBXKUPj28gLEZRhsXhRXYjIaPj7NM5LV7sJsJDu6FsrxlXnn9jbj1TtbPW
E2oUq7xldX48/leC70DWRa91It5NgrfJmBz3toJ9i1Df8FxSX68L+zfC2ti2
DcWRLhy/eW49C9gthA/TF8sD9t3n/WklnP8m0K1E58rz2wi7VtQb1uSL/O2E
M98de/+jpS+xfyc0brt0wvMA2B0EJyVqjn+/hX2boCkZOjd+MoB953/r7yS8
8cLC9OoFS9h/EJ63JKQcsq5kdxGyp3PTWkY3sbsJPWkLP9GPhLINhITNyvmD
Wzez/yRseDCtccoT/TfaznuLaUxRJmf3EDxuXVukClCy7xI87xwrOD0l4t0j
tLRlhbZGydgmwuEbRasSqpzYf9nGd+mk58KeZfcS3kvw3+WXKuozE1K03sN1
60W8Ptt5kJr1jm4iX7+tH8Yf2tfJgtgWgmR9iUrWJ+q9T8iMGdY1uIr4Dwjv
7nFxPBIi+vuQMPz5TJNxrcj3aK4/a9h/Ez7NjKhPPe3G/ofwwTsHLV/VBrP/
Jdwd3C33j9nGHiDsDzJGf2wS8QcJ6kmrh2J3F5+HIYJ9wI7c6YLV/H7Y9j11
e0kvxIv+jxBOHb3aWfpMGHuUEDgvLtt3RQh7jBDkMNHZWCHyjxOyuo9OJJWK
/Ziw/V/C99TmuYt6rISkCNOrtY/F/McEH0N8ctg90Y9JwnZ14d7+RHGepgiJ
cp1DZ+VW9rSt/pmgM8rCKPYM4UdZ//FmtYotKUe4Y7M2P0fksyuHdamloswB
+A8Tdsq7
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.},
  Method->{},
  PlotRange->{{0, 5121.}, {-114.90215250000003`, 119.32733500000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{102.42, 102.42}, {4.6845897500000016`, 
   4.6845897500000016`}}]], "Output",
 CellChangeTimes->{{3.600090038301139*^9, 3.600090063795597*^9}, 
   3.6000944048918934`*^9, 3.600094868457408*^9, 3.600096794077547*^9, 
   3.6001003571193414`*^9, 3.60010056462421*^9, 3.6001007197670836`*^9, 
   3.6001027921866193`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"tempPoints", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "20"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6000900226142416`*^9, 3.60009002923062*^9}, {
  3.600090061450463*^9, 3.6000900616744757`*^9}, {3.60009440308179*^9, 
  3.6000944046648808`*^9}, {3.600102806168419*^9, 3.600102812357773*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQEf7L1n2S/bKml9ACrg8I3XJ08k3QjK53BwEwza
vlmeC8oXcFigsPGurcN8ewhfxMGxI+XERlVOqLyEA4PaSh/D5xxQvozDnq0+
bY8/CkL5Cg5B8yot34SpQflKDvkHnrcLfjCA8lUclJ6qX7Xbqw/lqznE7/ua
uJdRHsrXcLhx1+aqovhHqP1aDtP4rv239LkL5es4qNxUvsKzFGa+nkOcofIe
WylzKN/A4el3s783TU2hfEMHX9Eer1cxolC+kUO89sLdKn1CDhC+sUNras6L
tOXCUHkTqP/1DwAA+v5VJw==
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.},
  Method->{},
  PlotRange->{{0, 20.}, {-27.100428000000004`, 4.638812000000001}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.4, 0.4}, {0.6347848000000001, 
   0.6347848000000001}}]], "Output",
 CellChangeTimes->{3.600102812578786*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Try with java-oriented methods", "Subsection",
 CellChangeTimes->{{3.6000904318366475`*^9, 3.600090462634409*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tempTrace", "=", 
   RowBox[{"nounou", "@", 
    RowBox[{"dataReadTraceAbs", "[", 
     RowBox[{"0", ",", " ", 
      RowBox[{"NNJ`Span", "[", 
       RowBox[{"0", ",", 
        RowBox[{"512", "*", "10"}], ",", "1"}], "]"}], ",", " ", "0"}], " ", 
     "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6000926439031706`*^9, 3.600092646984347*^9}, {
  3.6000929412701793`*^9, 3.6000929414311886`*^9}, {3.600093635673897*^9, 
  3.600093652213843*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "tempTrace", "]"}]], "Input",
 CellChangeTimes->{{3.6000944120863047`*^9, 3.6000944189856997`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1: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
ku5/zsXaxg==
      "]], 
     LineBox[{{312.1760435571688, -114.90215250000003`}, {
      313., -101.04675350000001`}, {314., -106.02126900000002`}, {
      314.62987012987014`, -114.90215250000003`}}], LineBox[CompressedData["
1:eJw9lA9MlHUYxw8UQ4k6rXEtwEASRC65LkwUha+O8ccIr8tLDyGoITpKuXXv
v0PFC1H5Y4hFCQl0aFTeKo8/F4Gwuwa5UWswpmAieWoQDvEwmohCf9zvWe/2
7t1n7/t+n+fzPO/e4LfztDs9ZTKZ/r/z0bWz/7PmQIcRqa6B4Y62dKfs0eE0
ovo1ZWvUF8R9Rrh/rp4obdnG2GXERcvupUh+g/GkEcdm2urDl+gZyzhk8IHW
s/47GMs5NFyvbDOFEAdxKJXGZ4c2pTFWcUjL7bw2ZqU8cPjUnBmS3KlhrOEQ
YWjyvapLZZzFYZnu6XNNx3WMDRye3epfU1xF/Zo5BFy6hYFdVK+CQ+TI/sbp
x7cytnBYW7Ry9b6xVxnbONw4GPFrYzSxk0Poh2M7KzOofh+HKe+9n79bqCV/
DrqAx958wUU8ySHGe13apTnqT8bDnCN/7nJqEvnzOF0X63mw5xXy5/H+qR/L
vP6kfBWP9O8GFAsHU8ifR0p5TMMhj03kzyNHHdC7azHIn0e+/imf/XEJ5M/D
p03bW2hNJn8e7oVLhobDE8mfh9y+5xmvTsqz8IgTC+cGV1Cejad5Ezt5FGzP
u7ioaiP58/hoQav9cHAM+fPIarqbVXZrOfnzyG4pt4YWTzmYv4BWZebJ69Ny
8hfQ4Lc59MsLIeQvoMOecuTm3WDyF/Cg5nxG5ISC/AVkRtSff758GfkLyE68
qXE8jCR/AXeerBy6Z48gfwGjktfpMK+/4pi/gJ96ur8pLHoRzF/Alk/S3GuU
UYwtAm64Fc3LfUIY2wRYghqHN+Aa698pQLocn7PKMM24T8CJw2PyaO0sy3cJ
ODU/L+lMvwd7f1LAbY+pivB/qL5MRKujeUP+O4HsvlxE49mpr+6XUP0gkfLX
MFaJuDpTkNtR9ARjiJhTeHtmq9TkL+LI7Y4PfvEMI38Rec4/ji6eVLHnDSLy
R0dsD0NjGZtFfB20oP3e8ZfIX8SBt9Q6Ve4K8hexI3z+eyVu6scmwh47UqWs
ofedIpamrxtd30XcJ0KZq/Lt6lnL2CWieE+Z2r9/NfmL6E7QO6r9iGUSvm8+
tz7pdcqXS7TfMPKXcGz2QfDL28fZfFUSzaOVMSRUH7Kc0c2j/jUSFNoC7cQM
9ZMlwTNq88m/ayPJX4JxyzZRKfix+ZglDBpO7Gsv9WVcIdH3Sfu2SOAz7v8w
o6T92CTav5vtzykhNr/rwO971eQvIew3j7qWkgTyl/BxUfyVC9ZE8pfgaF+p
KRvYSP4m5ETX9Zpr48nfhNI7+sHd9cRBJrjnVVzprlU77ePCt4tWmf7///4L
tFPLjQ==
      "]], LineBox[CompressedData["
1:eJxcfX1czef/fyOEEBqNZo1YaBZrhNgLIYRGCCGGNQsxI0lO9/d1qlOd6lTn
/pzMTSw0GiHEGo0QwxqhEUIjhN/5fa7n9X08rtM/Hk/X+1z31+t6Xa/bT1es
n7OqjYWFxfc2Fhb//99DTiczKXcrzaq7crPsV79yi///p9xKirQJj/sfXshw
8VbaKpsefGLdXIbLt5Lz2g3JF7p5MVy9lTZdMdhn/Dma4bqt9Lzd547+7jb0
P9y0lVaWpOwcFPclwxYh9MXG2Qu2NI9l2CaEplqljkyZOYlhhxA6sOfPjcp1
Hgy7hFA/vzH33E+OZ5hC6IcZH9f/54bfe4dQc9L2s6ez8Xv/EOq/OGvv732n
MxwUQpNtM0aVr/JiWBJCYQ0Rr7NOzWBYGkIDl3z5avXhqQwrQ6iN6/Tsd/lf
M1wcQj/nHLCVurowXB5Cvww5MXPKwgEMV4eQ0mHfzXH0BcN1IWR7qNMK5WLC
+EPoyw0/O7SfifotttH47ZbvmkowPptt4nw4bKMFn//r1OEmsMs2Gv30csrt
TRMw/m0U+l3JvGkv3DH+bfSj6efOmwdh/NsouNZj9bCgq1+z8W+jvzf93vXp
GTuMfxvlWa731FwcjvFvo1ndOk3/sxrjU26jiAefeIxY2RHj34bxvT/Gxr+N
jp58VF1sdML4t5HrG/cpWx+jP3Xb6I+lB/MPZqH/TdvI61PpDPufhmH8oXTo
2C/jQn74HOMPpR3rLxW+dcB8O4RSw/t5U1P8MV8uoZQT31+7LhWYQumK3zqX
mqkTMf5Q0uS9Dd8YORrjD6Vb91sCNtRhPEGhlG49+mDBbqyPJJQiNwT9Kz+G
/kpDaY/2w7+9dVgPZSgtO/rf8t8+4OsfStvmpnX69pfuDJeH0ucr91jvHDew
nI0/FPuzK8N1fDyfYPyh1PX4ho9GXe6M8W+niz6z733ysQv73ma7eH4cttP3
40JznCIcGXbZTjNyv9Yf+Ai/p+30y2+9mm9VfcHKvbdT11F1z09+OYVh/+1U
PLA+smDTJIaDttPh496xH3YayrBkO3Vyixry1V9DGJZupyK7++snrprAsHI7
KRKPPeo4bDLDxdvJkG33e3PmRIbLt9OOv49t3fDcA+PfTp/9M7Hf8QueGP92
8nUcZPynE37ftB3752uGLcJoyzfN5Wds8XubMLoeXHxq3YHZGH8Y+Q06+TS0
aA7GH0YTe7x45HhmFsMURoddw/7J7I/xeYfRkH+XB/z0egzGH8bPL8YfRvv1
+50aJ6H/kjCqnHwgzmk9Yfxh9G15+s++SneMPwz7cxzGb2q/24G1duEoLw+j
mMay5D/ajML4w4g+sB0w49xXGH8YGYaYCGRHtN8URjale+Td22I+LHaQMtlv
lK4K/bHZQf3vfnZ5/G9YT4cdFPtjly9dlz5g59dlB+Vln3w8dso7dv5oBzle
G1BjrRuE8e+g3l6t39SsxXr676DQ6//sPdsV+zNoB12Ys18RFdYf498B+uyA
8e+gFz3Pr/v8eS+MfwfowwcY/w5aNlR1xDHlGc7/Duow5M7f3zlif1bvoEkd
v1z7vhnzUbeDXsoUPbedwHw07QA9OsPGYyGhG6/C1pRFgR5YSWjerj5Rv3b5
mGEbCWV1vfJ+tNfH7Pd2Ehrfxc5x++1+mB8J6I09+95JAvo3kmEXCY14lPfm
51HAbhIKqul06eUIfE8S8h7weeahntasPk8J6XpNH2Q43ZaVe0to8WDLjfFP
HBn2lWA/4Tz7S0AfP2I4QEKfLr36Re1yZ4aDJKDXoK/BEqq96X75096gHxIJ
Tek+59Avn2C94iR0/M+UvmHLsP5SCehLO4blEvLf/9Q/8d+B7PdKCf3pP/f+
N18NZtj4f+NhuFhCOwtHfVhUbsl+Xyqhq0Fp2w4ndGHl5RLao6pZ6rGsP8OV
EpzPC2x9qyW4v7A/aiXU+MFz6eD3luz7OgnoG+hpg4Q6H6u5kDcS69kkIbtL
Xi/HnAV9b5GAnrkybBGO+cD8WIXT2q8/unPSAf2xCafPlzpbp+0D/bYLJ8sD
du5ea3H/O4RTpxFthtjPxvo6hdMi9S9V/WV/4ryEo7/NbDxu4TQ2eJDrtGq0
T+E0svFlxRgp7lPPcDrv65qf32kU1j8c9wnW19dUfrf9pI+fYXz+4eR45fZc
i2W4LwLCyaFmcqdV5VOw/uE00H/T1h8txmD9w+nY9PGbe1tif0jCxfs3Lpza
a9LHfHAW45WG069jLG7v2fMZw/Jw2uXQ/vCLVPBPynAa/vzj1oqTqN8YTgU9
bDKC4nEfF4fjfNpi/cOp7IBXzJ2n/P4y+31lONW96VuyYADuw+pw8CNDGa4N
p2EP3+2zyUH9deH0pK30ekX+CKx/OAUcHNp8fNCnWP9wWvDZd06PvT9j7beE
i/TNIoI2n9P0Xf6rDcNWETj/2J82ETRqc/yD3cN7Y/0j6O7TktbyIgesfwTW
G+NxisD+7cbqc+HlT9l+cIugn5a0HH/ljP1IvH7Mr2eEeF68I2jd6e/jhoTi
/PlG0NveVm1WuvTA+kdg/4I+BkRQv7N3v9bOBn0NiqCWlD49V4xE/4IjwJ9i
/SQR5Pb2Wqpt8hCsfwQ1JdTtGPqqHdY/gqJXBTasNoC/lEfgvGK+lab6P13/
6+si0EtjBCW1vv50pG9f1n6x2XyWRtCB8Xflzgqcn/IIKv1lr7vnXOzfygja
OO/alsltwK9VR9BJr7+O7VeDvtRGgP73Z7guQqS/DWbr1RRBkhthr1buxvct
EfTt5+PblTtj/Swiwf9YMGwVKe4fm0hKeLzwaoAK59Uukpz+Kv/YOAn02CGS
HnR5mba49zA2XqdImit/6Xbp3HCGXSLpxuohFQO6t2Hfu0VS1rbwhapatE+R
OG+gb56RtOF83MVbetxf3pGg7+DHfCPp7suRb699hfvMP5KW7LzY6+rRLxkO
iKT77WqnGhrHMhwUSVM6Vx/MzcB9HxxJdtOO/HnmM/BHkkj64887L0fuBf8S
F0lfb4l4e9WJ8yORnN4xLI8U+Q1lJO0rem5siXdl2Gj6fmC7XuVfg58qjqTZ
g9Z9WLEQ/FJpJHl//LOsIHYqw+WR4n1TGUleKWN1kR9g/1ZH0sk5S8p/H4b2
ayOp01eTdjplcv4ukg5+1d+uwznU1xBJH+x+9TR7IvijpkjwT7i/WyJp3ken
bzrk4rxbRNGTrHrJku5o3yqKJkft6O7qNoJhmyi+XgzbReG+7MOwQxS/fxh2
iqK06AYbtznODLtwjPvQLQr0A/SVosDv4L3kGYX36SV2X3hH0fblI+a5rGlg
2DeKVp/44r/n43Fe/aOo/cj7dTnu4xgOiML7Ce+9oCh6rTiy5ItHuE+Co6hq
esac6rloXxJFl/75NKnQ0o3huCiq/Gv63j+c8N6QRuF8Yv/Lo0A/wX8oo6gw
x9/taj3oszGKbD1udnCYhPqKo2jFl+XtrpXi96VR4vunPIr+jdE3Nh/h9D8K
/OtkhqujSJlxa9RRX7y3ak3lb9L6jxiP+7Iuinr+lrTi1/uovyGKktY7hR4M
An1rMo1fPW6p51bcJy1R4DcxPxbReH+D3lhFi/2xicZ7G9/bRZO+Z0d9rgTt
O5iVO0WDngC7RNO5sxW7I6LwvVs0dR2+9PlOA38/R5Pk2ritvt/he89ouvzk
xJXAI6CP3tF4rwL7RtPyXev9Ny7B7/2jKSfmnwErpmG+AqLpXYGv4VwicFA0
rS+/H9u9CfUHR/P3BMOSaCrsOLPHjEOoLy6aTlfcu3O9EFgajfcN5lMeTZ5J
BYsbVtgyrIzGe7Mfw8ZoetZ9+MB0H9Dr4mjQS3xfGg3+0L78f7g8mlaN/Xt2
8p1BDFdGU/rW+m7txwxguDpafC/URuO9jPNVF03JL4I//bhqJMMN0VQTsHF4
e3/Qv6Zo8PugVy3RnD9m2CIG/CHog1WM+J6wiSGfTzxvjR4EemsXQ4PuV/S7
vhjvMYcY0AO895xiSN116I1neZz+x+A+xHvXLQb87+cMUwzuJ9Abzxh62vuX
gT/XoX7vGJqR/W5g0SXQO98YervTz9iqAT31N7XftfsowzXQv4AYiqzPn/RR
LehxUAy/7xgOjqGp7WYdDO+A/kl4Oeh9XAwNmHNpmH4a7gNpDBllV6c3zEa5
PEa8f5Qx/P3EsDEG9BXyhOIYft4ZLo0BPQI/Vh7D6QfDlTFU3F/TNn0Y+lcd
Q33OeL6w2of1qI0R3391MWQxqMhr+H0rrH8MJTe9cLAk7JemGP4+wvrHiPIo
i1jQ3xcMW8VCPvKG1W8TC37oP4btYs34v1jS5+f+3qU/6KtTLPhznFeXWJoq
V/v12Ybz5hZLz+Xh51r2gh5RLOgp6K2nqT9Kpe3u6/z8x9IBt2/lPW1Aj3xj
+X5j2D8W9yd+HxBLqRtOnfqmG85vUCxtNMFfa/j5j6XWjJYbHfuiXBJLj3dI
DqyJ4+c/lpYY0rLOBfPzH4v3AbA8lu4E3Vvw43VgZSz98ln4H6N7AhtjSf5e
GvbmEXAxnz/Qo9JYGrxqzqS+d6cxXB5LG/48O+dhI3BlLH1tOU+zwMaT4epY
rBen/2b11cWK9LQhlsKbVB4zmjDfTab52NR+ytJ5kMe2xNKswo+DlryDPNYi
js4trL3UdT/kr1ZxlBV24trufvjeJg73L+4zuzhKbLO9/+x6Lh+Mo6RXv6oG
90D/neJolnpp0/ceMxl2iYN8GPW7xZFnuoPfB08wPoqjT+ZuWdX7KcbnGYfz
C37YO44ehKgfntBgfL5xVFaa3L5pFMr94+iL9V2vrtmD9gPiaKfu1w9PeAEH
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
n3nZLUZ/JSmQp3H9TwqXPzMsTaHq1ZfvrzmO8yJPIZXt7hudneYzrEyh4vs/
ZM14j/UyptCOuxNCEnZg/MUp4numNIVKDsmenyL0tzyFYramfjnzAfZ7ZQod
Pbv+z7OuaK86xYz/N8N1KXRufvbcNoH8/jeN987Ry2M0nP9LoaCpbp8Hz+Dn
P4UebL/zw4V/cT9apFLfGb59vz2N761SqXzq2/86HeX8fyo5r3HpcvIssF0q
VV9rM/HhNb7+qTRm23cl83px+p8q8mcuqXRpXfPwTxqx391S6bH13MUP1nP+
L1W0N/JMhTydv/9Saf/I07OCN3D6n4r9jv3jn0p/Ge4Mj6zC/AekivxzUCrs
OdBecCp9cTd030trvv6pZDdp9J978tB+XCo9tHTtPnIyxiNNFd+D8lR6p71u
uNOb8/+p9NWzrafm2uN8GFPF+S9OpUUjzjzbcxzrXZpKHhZBjdf6o3/lqSK/
WJlKw18sDf2zI1//VJG/r02l1C1TT6/J4/e/WfsNqVR6sKnMJ4ef/1SaHFue
RmF8/VNxP3H5r5RyJcsGTPsN2FJKFdNyv9b7oT0rKZV5qpxDV2E9raV0bOaO
FwOmA9tIqc+5+M0fvkR7tlJR/mAnpVTLPoEPIoDtpaL9kIOUPO33h2+Soj5H
KY2LORPWKxbz5SSF/h/9d5bSrUch3ycEYvwuUugXsD9cpfS627+H9rbj9EYq
7h93qShPJylF3L91cmA/YA+pyA95Sum904OqcZ+jP15S2nazv8sVH3zvLSWv
NNMDbyr65yMV3/O+UsivUJ+flA6Vbfxt7UDU5y+ll7n9bGWzUL7SbPwBUupw
+EW75m8wP4FSur1j6LV9btgfQVLxPbNJSoOf3AlIiYF8JljK7V8YDpWSJnNb
+MKXfP9L6cw3v8YvisX5iJLS+cU/fbzTGzhOSu6tXy3U3MV8J0lp68UTqz6s
n8iwVAr5NLDMtL6RSs28tjhPcil9P2bsR/buKFdIaYhf6on/eqBcKaXoJ2+7
XPdEe1opfbrcrrjegPEapSL92SWlLrtnnfdOx34tlor2CCVSany3z+bjX9Fe
qam+8yc7erkCl0lF+V+5abzzntunVWA+KqRkte/L6PM7sL6VUlFeUyWlSW33
Bd4LQP+rpbRrwNQxba+gvEZKI7eeW3N4C/pbK4X9INbzhlS87+qkpP2ki6FK
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
93+R6D8zrEi8X12KRH5tRBHZhQWN/+8c6nMtQvwO0IeRRfAvBP/vVkSqOQPP
Lc3HfI0pgr83vncvoj2ug9vdvMjl/0U0NGh/lxvzgKmI+yszPNE0vyP7Dh1+
nL//TfPnqV0bupzf/0V0bbnX623O/P4vwnsG+WenF8GfBvlsvYoQfxX5ZGcV
wd4b/fcugj041ndOEc25VqwfEQPsU0StvsfXn3wIPL+IykI+/Cj/BH7vW0Rn
ZoyKn/CGy/+LYO+E7/1Mv58neXJQh/Vb+v+6uu7wkK43rLY0Qo0gZs3YatX2
1Z6x0thbCUIJQjWCVNWMHStmFXefgyqqxKhqSsROVYlNahVVRfnd53ff0+f5
7p/vc+899+zxne97X42uZDa8N60ing/S6OnJ+h9W7KHO/xrtrn1t5csvgIdp
iAcAHq5xvd1IDfrVwKN8z6M0zF/4fqwGfWnkd5wG/SE8j9Zg78fziRoNehCa
eroo8hujIR4G9T9Fg74Pnk/V4N+J9GJ99R2nIT4F78/QEL+K9+M1qtC/zj/D
96G9ZmkUs9SqUSkNz2dr9CC5YbmUlvh+jtu+6acbhHdD+vM0at1pbvmXYfh+
gUZLP3pY9kRX9IcEjYZ91rNpRi+lH63BPxblWapxvezlGn3b7Naqaknor4ka
4g3x/iqN5lsbR+a5DbxG4/N1ksb3X+s1xE/29vBGTfHle3izRj0GvdNp9TXk
b4tGH9rTL94JUeu/b37YrkEfHuXXNSoy60mzoJ5Kr1qj9yb/VWVHW/zf1ng8
pNC4fWmHRicTzXmPp+P/uzTs16GvvVujsEvhv39dHfW5R6Pl/z6tO6gL/r9P
gz8Y/rdfo6gWfYamDcfzAxodznL4q6UxSv/aHX9/Vqqy9rg6/2v8PHlUA7+e
Ov9rXO/4uK//pmh0dmtmqd7nkd8TGmW2fhC3IgvqO1WD/xXqM819vifk18LF
kN4ZDf66SO+cRn920Qrc+hnlvaBRzrG/nzxbAThdg74N6uuSu56Mb/C0ag1l
/9do28qivzxbgf9d0WhZ46iyO4+iPBka9br3sNHa39Bfr2vgu0f+b7r9c1H3
PKd+Qv5va+CDxP/uavz+MVODfRf5v69BHxj5feiOv/zv2yVWAj/WaOhfbYvO
bon3n2ikXxob/+gR6uOZm/7iKvMuPgV+roGvG/l/ocG/Gv9/qdZnpPdaowb1
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
lx9a/Hz7WOUf5+MnFr/PfGZxf7PnFvg9lf+fBb5Ndf63qL5M7vlsEPBri/sH
vrHAb4X6yWLjPhz72aw25z/ObtORLiXo4F0V/2dT61nT36vbQJ3/bX5+DrDB
P4H0A23Es2C/EmRTE3e7mbgB/8tvc//LAjZv30I216sMtuE/Dj6SojbnLwix
eX8oYSO+Df8rZXN95TK20h9I/j8ua+M8ksvD5W2lV+u9X9GGfyf8WUNtzt9S
xQa/CvShqtl04MiDNLE9t4dr2LQ2+6ftvj4DPdpattIP876vbXM9uro27DGK
/8/mensNbOgJgY+lkc31opvYdPL0jb/rO4r/3+Z8XGTTtjW9O75zGe3dwsZ6
ivK2suGfgf1MGxv+q3jezub8AR1sujxydKtaPZFeJ5vzTYXZ/HzW1UZ8I+qz
u2pvtF+4zfm7ImzMT0pf3eZ8Gn1s+A8gP/1szn84wOZ8p4NstV/w8BCb1gcm
LO35L+prmM3Pe8NtWvdl0wePNyE/kTatDv6r/cMY8NGNsjnfaJRNo46eaLbo
d/x/rA09MtT/OJuvJ9E25zudaNOybDH1PvsN+/8Ym9tzp9g8fmaq2357oyam
Rin7v414aeQ3zubxTTNspe/i4Xib26dm2XSlwviIox8r+7+t9F88PMedL0rs
mDlxMfIzz6bINs1DwsJRvgU2jx9JsPn5Z7GN+HvgpTbWe7y/3Ob8VIlu/exp
PPrDmyr+z6ZuV2tv61gA9to1NrfXJtkUsyjKDpmn/P9s7m+40aaJQevznNyn
7P82zRPX7hWuhvxssbm/ylab28u32zy+R3fnl6qF7r0xlf+fze2ftk3h/ZN/
WbAW/xM2+AiU/d/m/k27bG5f3G1ze/IeNV+o+3+byl+43iPLQDzfb3P/ugM2
j29JtrEfxPp72Ob+HEdtfl9/zKbn5z+eeWka6ve4zeNTU2weH3zC5v4VqTb0
OfB9mk23477aTEuQ/hmb5tQs2Pp4P5TnnM39rS7Y3P893abXy15czlMc+JLb
v9bkEu3moL4u2/S2/4aGo9Pw/RVb6T95OMM3nq7bPH72ps3tF7dtWrgnS92U
COT/ro14PeBMmybMS7gZ/Y06/9s8nuOhzfeXj93vG4YO3hqv4v/d8Zp14Onq
hZX/n839SZ77+t8LG3z5eP+lzc/Tr9X8qOL/bepyekm/uL54P4vD7w+yOuC/
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
/vVwN0k1b8XKvwNRn90l3x/0kPy8Hi65fsHHkvvjR0iu19VTcv+MXhLx4Oi/
vSXXP+kjVTyIh/tK3LcjvX6S62n1l1TkYGUzfDbqd4CkkfRDsXrHkf+Bbn1N
qJQ+vYzyf5Fc72awRHwe+ssQyfUdh0quHzxMcv/CTyT9fCJHjUUpyl/GNx+M
cOv3euMP/jiG/EdK8DkDj5RqvfXwKMnPp6Ml4hGR/yjJ9/NjJD+fj/WN30+l
Wi89PE5ye+J4Cf5jzK/REnrnmF8nSNq4eN13sgDGw0RJ4WXnDmgThfQm/bfe
eThG0i5Z4Km5C/U5WcK/TOl3+ub3zyTXn58qOT/n52o9RHliJfyJ0H7TVPug
/HGS2/unS+7/N0Nyf9yZkusNxUtu//1C4r4aeJZvvvpSgu8X+Zktuf/aVxLx
7fj/HMnvl+ZK7v80z11/tu4Ivd8S/5svEc+tzv+S60ctlFzfM0Hy+9JFkttD
FkvEn6J9lkjwx2P9XiphH8J8sUzSu9VmVM52ROmTSprQpefkajH4foWE/2cx
DydKft+wUoLfEu2zSiL+DPPnaol4ZdjD10h6EH+o3uRU9L+1Ev7VwEkS/oiI
B1wnud7Tesn9MTdIruew0d0vTN/UdkEP1O8m1f+wv9ns+9/XEnzoqI8tksdr
faP2fzk9vFXCfo722Sa5XuR2CX1r9B9Nwj8P7atLrn9rSK5vaEpuf7N885kt
wfeC/YojEU+B8gjf+iF9888OSQG1s1Yp0QX1uVPCnoX90y7JzzvfSqVH5+Hd
kpq8jfnVqYr943eS6/vukfROydu/vFsY9b9XQk8OeJ/v/99Lbo/cL3m86A+S
3oZmnmhaXem9SG5/PCj5eT1Z4j4J68chyfUyD0t+v3hEUtdlxT6tehv/Oyrh
L4P3f5Q4z6G8x9T8DX/Yn9T+Fee545L7r/4suZ5eiuR6b79IxHNA3/CEmk8v
evv3k5LrH6ZKHh9xSu3HEK+QJnG+fup9f9rdj50ZM7ffcsQLnvHNt2cl+K5R
H+d888V5CT5h9K8Lkut9X/TVf7raL+D+8VfJ9QMvSa5n95uE/yTSu+xbn3/3
jccrUp2nPXxVlfesd/7IUPu3PN7za5LHP11X8xn+f0NyPeebEvH60Fu8pfbb
OH/fllwf8o46r0Bf8K7EeRnlv6f2p/DvzpQ8/uMPlT78Xe5LHu/0QELfEPE1
DyWPv3kkaWf1bKndNyA+57FUeuke/lMqfzYPP5GKb9bDTyWlRKzskTUK8UHP
JD+f/yUpJOuMoV0yEB/8XCp+OQ//LRXfhYdfuP03f+Mekb2B/5EqHsHDLyX9
0Xx0XOzEcA+/UvuzCA+/lqTd+CBb4cO9PPyvO963zAmserSnh9+o9RLfv3X3
x3sP5Psq+WMPZ9mh+KiSowqMb9TJxWEZF37fv7df8v8AyqBXDQ==
      "]], LineBox[CompressedData["
1:eJxdmXdcz9sbwJNKypZSGS1Kg5IW4ilJWqKMiIoyCtl775GsUELoCjfj9hzJ
iHIpXDOVca8oq4wo2fN3fp7n4/Wq/un1fp3zOec5zz7nazwyZkCkqoqKyv46
Kir//19yMgOj6iD4l9wuzjoZkqPy/z9VhNEqBx55HgsmrovQR3O9Y5xfILEa
QvfP7+5uTWZWR8jxyJr+Y+ZgYg2E9d2bBJuNH0JcD2GEnWmWqwGPayL8W74j
+dHKgcT1EdSf+BwIWzaAWAvhQPwd7/J+AcTaCLPjvWf9PZH3a4DQ6fCKC2dM
Wb6GCD16N2qaeYW5EYJHrvPCzdU8vzFCgKnNlszmvsRNEN42tWu3KagvcVOE
wrFT7DTCfIibIdx4lPt3k0M8vznCzdFFZVHn/Ih1EP7s5NPN4bU/cQuEc9f9
kibr87guQiOnkurz9p7Eegg/raz8vKe6EreU4+cm6zsVdSPWR8jK8F3xuMqN
2AChnvne0GEPmA0RetbbahoxqCtxK4T2Q9/OGjrNgbg1go5HcT2jXs7EbRCG
dloxZe9cF+K2cr8uyVMzK+yJjRCCj2ReCzpkSWws7TWzT15UUjtiE4Rj6c2q
Dx1rT2yKUJ2w+J9PR62JzRC2zl0cvOeuLXE7hKMW7dTSTvH37RGezVLfa67+
rucvNkcItdpz2ixOFX6xBcKjN3qinbYpze+A8KH59Yk21byfpbJ+E5pvJfdX
tzEL625LbI2g5/utf+EES2IbhJNdVR4dOWJO3BHhWv7jj45H7Yk7IVzy+qDp
kNGZ2BZhwK7ZLq8G6RLbIai0P+hrV6ZJ3Fnqb6+4ahJvR2wv9ZEZX50L3Yi7
ILyqU72hw88uxA4IbqsiLqW360DsiOC64uIC3ZVWxE7K+Xl/Z4SYnLKVTSv5
PC4IpUvGB59d0Ja4K8Juo/RiV7hB+uuGYBNxpMGfri1ovDvC04+O3+85OBC7
IqyYvd7e70UP4h4I027vb7U534W4J0LeRfOIsqesD0A4e77i5l8HnIndEKqk
OdJKXIndZfyZvZw0bX5X4l4IZ7rvtPL24/08EFT3vK+MtOT1eiMsnTzpeUK2
NbGn4t+GxH0Q5v1bevRyo3bEXgi99Qozr6axvH1l/B8aeLp9Uh9ibxkPJ9Zp
VDp5EPsgHO9cuu3LUt7ft5Z+/RA2zX7SWKMry+OPcOfx2aKuKTy/H8Lt53A7
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
IUvp
      "]], LineBox[CompressedData["
1:eJxd1HtQVHUUB/AFBx9DKgMsviJlTIMAZYEWBYovi4LYEsHgpAnOwODAQKUN
KDONKWPOpBMVRUlgoEmhOBKtZ10glF3UeLhpLBBKsC1CvHxUwPKURyvnxz/d
mTt3PrO/3znnd8+565JwIHq/tUQiibHcz57Sr7aM6ssIb3S2Gq9Vxuokz66f
CHf2aQo0p/eyVYTKQ36RI8YY9hVCSyqp7Isj2ES4FZ4fVBwbxlYTTOn6ZYN1
O9hXCU19RVkV2Uq2hrBCORXV8u5OdjnBXh54PTormF1BCFmgeqc32YddSfhi
XJpakeLL/plwIXel3vy1gl1FKD7X/vrq5HD2NULcpSane9Uh7OuElc3KMf8G
Z3Y1odDeLufgKVfMWUtIi3wrw+Nwb9CcdZZ6YyJ71zp78foaglplP3xZ7cS+
QVgo7+vMC/Tk/TcJk99WxW1+soJ9i7C554hq7DlR7y+Ek0lLvK1DZexaglXp
xGCuwoPX1xGWoih9wOZVdj0hvfXC8zkGN3YD4bHVcLbbrCPvvz1/nmntnPWE
avkad1mNF6//leA5mHnFbYOId4fg3m1Kin1Pzr5LqK17KbGvx4H9G2F9dPOm
4nAHjt84f55FbAPh47SlPr77HvL7aSJcOusnLdE58v5mwq5VtcZ1+SJ/C+H8
d8eOf7L8NfbvhPrtV0+6HgC7lWCnQPWJ7/3Z9wiqkuGL46d82ff/d/42wtuv
LE6rWrSM/Qfh5YH45EOTq9nthOyZ3FTD6BZ2B6EzdfFn+pFgtpEQv1WxcGjb
VvafhE2PZlR2eaL/Jsu8G7rH5GU+7E6Cy92bS5S+CvYDguv9YwVnpkW8LoKh
OTO4KULG7iYcvl20Jr7Sjv2XZX27zvliyIvsHsKH8d67vFJEfb2EZI27uWaj
iNdnmQfnXr2tVOTrt/TD9EPLBlkAe4Ag2ViilPWJeh8SMqLMujpHEf8R4YM9
DrZHgkR/HxPMX842mNaLfE/m+7OO/Tfh84yw2pQzUvY/hI/ePzjwjTaQ/S/h
wdBuH++o7exBwv4AU+Sn3SL+ECFratJFvrud52GYYO27M3emYC3/brZ8Tx1u
zpfjRP9HCKeP3mgrfSGEPUrwWxCb7bkqiD1GCLCZaKsvF/nHCZkdRycSS8X7
mLD8v4Tu0eY5iXomCYlh3W9qn4r9TwkexrikkC7RjynCjqzCvf0JYp6mCQk+
Opu2im3sGUv9swHnFYUR7FnCj7L+E41ZSrZEjVDbRk1+jshnpcbk8oHyMhsx
v9ZqVOJ4V51/IP4D4gDPjA==
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.},
  Method->{},
  PlotRange->{{0, 5122.}, {-114.90215250000003`, 119.32733500000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{102.44, 102.44}, {4.6845897500000016`, 
   4.6845897500000016`}}]], "Output",
 CellChangeTimes->{{3.6000944192777166`*^9, 3.600094422735914*^9}, 
   3.6000945050536222`*^9, 3.600094878274969*^9, 3.600096798398794*^9, 
   3.6000968603273363`*^9, 3.6001003650217934`*^9, 3.600101094441514*^9, 
   3.6001028478888054`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"tempTrace", "[", 
    RowBox[{"[", 
     RowBox[{"1", " ", ";;", " ", "12"}], "]"}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6000928196952257`*^9, 3.6000928216563377`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], 
     LineBox[{{1., -27.100428000000004`}, {2., -18.4026555}, {
      3., -3.2654795000000005`}, {4., 0.030518500000000004`}, {
      5., -3.1434055000000005`}, {6., -3.1128870000000006`}, {
      7., -4.486219500000001}, {8., -11.169771}, {9., -16.937767500000003`}, {
      10., -15.869620000000001`}, {11., -7.751699000000001}, {12., 
      1.0681475000000002`}}]}}, {}},
  AspectRatio->NCache[
    Rational[1, 5], 0.2],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.600092822165367*^9, 3.600092996728351*^9, 
  3.6000968063982515`*^9, 3.6001028518590326`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"tempTrace", "[", 
    RowBox[{"[", 
     RowBox[{"501", " ", ";;", " ", "524"}], "]"}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600090474512089*^9, 3.6000904917830763`*^9}, {
   3.600090588271595*^9, 3.6000906088857746`*^9}, 3.600090683961068*^9, {
   3.6000926522696495`*^9, 3.6000926996743603`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7CvazsbdPaGyHyrgwFe4+mNNvwKUz+FwUOvP
gQNislC+gMOEe5NvZnZKQvkiDnxdJqW5PEJQvoRD+tLNSzM4/uyD8GUcTt2M
TwvRfwvlKzgsWFBvFLxOHqpeyUHo3apO/etGUL6KQ+38FS/OyhhC+WoOem6H
ufbkHbKD8DUceN9FNOszaNhD+FoOq3auOeR8UwzK13HYJV7Cm80lDtWv56D6
u7n4lacElG/gsJDLU3bDAZh6Q4e3Z5fel1tlCOUbOdzJvzflewWMb+xQ8OGT
jZUuTL2JQ4Zj//RlImxQ80wd8to0g+5K/Ye6z8yB7ZC7z8syBah6c4dw0VvB
CXcloHwLh01m/xK+fRe2BwB2W2fG
      "]]}}, {}},
  AspectRatio->NCache[
    Rational[1, 5], 0.2],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6000926730118356`*^9, 3.6000926998983736`*^9}, 
   3.6000929973073845`*^9, 3.6000968069822855`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"tempTrace", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"512", "+", "501"}], " ", ";;", " ", 
      RowBox[{"512", "+", "524"}]}], "]"}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600090474512089*^9, 3.6000904917830763`*^9}, {
   3.600090588271595*^9, 3.6000906088857746`*^9}, 3.600090683961068*^9, {
   3.6000926522696495`*^9, 3.6000926996743603`*^9}, {3.6000928876941147`*^9, 
   3.6000928977346888`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7Es/uDhbsTjaQwUcPk3NZFW+4grlczh4mQgt
fP3ZC8oXcJjwXSY2is0byhdxOOnM4Gd4zQ3Kl3CwX9IV+ni+E5Qv47CZ5U2k
6D8HKF/BYauZekpZMsw+JYdrn7b+PHIUxldx6EjfJ3JJFqZezcGv/r/hXkcr
KF/DYYoT1zvtEBhfy+Hkj5TD8fEw+3QcWOy/3p393B3K13O4y2q3VuoSjG/g
8P7/g5f1/DD1hg5L8/YbFnWbQ/lGDpxdj/JyTWF8Ywfzr2ob/Nth6k0cNvjH
PUzj9IDyTR0Or/XT51sGCy8zB7ZD7j4vy2DuN3dQr7v20PwmjG/hUDE/7NFZ
Vzd7AJ0rYCM=
      "]]}}, {}},
  AspectRatio->NCache[
    Rational[1, 5], 0.2],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.0003541366740000001},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.600092898235718*^9, {3.600092993306155*^9, 3.6000929979104185`*^9}, 
   3.600096807845334*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"tempTrace", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{
       RowBox[{"512", "*", "2"}], "+", "501"}], " ", ";;", " ", 
      RowBox[{
       RowBox[{"512", "*", "2"}], "+", "524"}]}], "]"}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600090474512089*^9, 3.6000904917830763`*^9}, {
   3.600090588271595*^9, 3.6000906088857746`*^9}, 3.600090683961068*^9, {
   3.6000926522696495`*^9, 3.6000926996743603`*^9}, {3.6000928876941147`*^9, 
   3.6000928977346888`*^9}, {3.600092999426505*^9, 3.6000930109901667`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7A8du77pn5K6PVTA4XSpdcQka3Yon8Oh86+s
7tcytv0QvoCD20sVAallp/dB+CIOqr+bi195SkDVSzjYXZsTc2SmKpQv45Ae
JSE9fSLMfAWHBXm52kVbZKB8JYc7+femfK9ghJqv4mD+VW2Df7sSlK/mUDE/
7NFZVzEoX8Phs0vQQrNVslD9Wg5dM3/KGTcbQPk6DoenHF0tq6kC5es5mKlb
bjdoFIXqN3A4vNZPn2+ZKpRv6HDox8ud92VeQf1jhOY+Ywc7jvXJSyfvgMqb
ODwxP723mk8Zqt/UIV+J1UVanRPKN3M4XG2jobtGCarf3OGN4am3D+aKQ/kW
Dpc/9XxziVLZDwDa9WUw
      "]]}}, {}},
  AspectRatio->NCache[
    Rational[1, 5], 0.2],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.600093011456194*^9, 3.6000968086233788`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"tempTrace", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{
       RowBox[{"512", "*", "3"}], "+", "501"}], " ", ";;", " ", 
      RowBox[{
       RowBox[{"512", "*", "3"}], "+", "524"}]}], "]"}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600090474512089*^9, 3.6000904917830763`*^9}, {
   3.600090588271595*^9, 3.6000906088857746`*^9}, 3.600090683961068*^9, {
   3.6000926522696495`*^9, 3.6000926996743603`*^9}, {3.6000928876941147`*^9, 
   3.6000928977346888`*^9}, {3.600092999426505*^9, 3.600093028061143*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7HOWsq7JuG9mDxVwkDB2dUm7aw3lczgkJEi+
NmQyhvIFHBoazvQ5RUhC+SIOi5ap8L87IwDlSzgoSyWcLeUzgPJlHNxeqghI
LYOZp+Dw/H/qg/9nLKF8JYePhjJfHpQYQfkqDt7bU/gtm2H2qTmYFV1xZPoB
U6/hcOrAtUfJm2DmaTmcWu4bX2xqBeXrOIhuc12zeSpMvZ5Do6khS+FDEyjf
wOHL8SX8LZZqUL6hQ/2me1OVg2SgfCOH117BhRelNKF8Y4f2qtP7lj/XhfJN
HFaHdmxpfKoA5Zs6PHrWFcZfKQvlmznkFH9e0v4U5n5zh2OlLwMnpdhA+RYO
cRpJ7Nte6tkDAKSnX2o=
      "]]}}, {}},
  AspectRatio->NCache[
    Rational[1, 5], 0.2],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.00006408885},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.600093028375161*^9, 3.6000968094474263`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Read segment info", "Subsection",
 CellChangeTimes->{{3.6000904318366475`*^9, 3.6000904570830917`*^9}, {
  3.6000942226094675`*^9, 3.6000942309679456`*^9}}],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"nounou", "@", 
   RowBox[{"dataReadTraceAbs", "[", 
    RowBox[{"0", ",", " ", "NNJ`SpanAll", ",", " ", "0"}], " ", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.600096917061581*^9, 3.6000969375197515`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"segStarts", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"nounou", "@", 
     RowBox[{
      RowBox[{"data", "[", "]"}], "@", 
      RowBox[{
       RowBox[{"segmentStartFrames", "[", "]"}], "@", 
       RowBox[{"apply", "[", "#", "]"}]}]}]}], "&"}], " ", "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "3"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6000852384596033`*^9, 3.600085244552952*^9}, {
  3.6000892650139093`*^9, 3.6000892834449635`*^9}, {3.600089342198324*^9, 
  3.600089343335389*^9}, {3.6000900166909027`*^9, 3.6000900179779763`*^9}, {
  3.600094233636098*^9, 3.600094278612671*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Java", "::", "excptn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"A Java exception occurred: \
\[NoBreak]\\!\\(\\\"java.lang.IndexOutOfBoundsException: 3\\\\n\\\\tat \
scala.collection.immutable.Vector.checkRangeConvert(Vector.scala:137)\\\\n\\\\\
tat scala.collection.immutable.Vector.apply(Vector.scala:127)\\\"\\)\[NoBreak]\
.\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.6000942729973497`*^9, 3.600094279002693*^9}, 
   3.60009681720687*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "123392", ",", "6878208", ",", "$Failed"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6000893463145595`*^9, 3.6000899645869226`*^9, 3.600090038100127*^9, {
   3.6000942565384083`*^9, 3.600094279003693*^9}, 3.60009681720887*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{716, 867},
WindowMargins->{{206, Automatic}, {71, Automatic}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 104, 1, 90, "Title"],
Cell[CellGroupData[{
Cell[708, 27, 119, 2, 31, "Input"],
Cell[CellGroupData[{
Cell[852, 33, 835, 12, 23, "Print"],
Cell[1690, 47, 815, 11, 23, "Print"],
Cell[2508, 60, 816, 11, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3373, 77, 182, 3, 31, "Input"],
Cell[3558, 82, 882, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4477, 103, 282, 5, 31, "Input"],
Cell[4762, 110, 1047, 17, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5846, 132, 271, 6, 31, "Input"],
Cell[6120, 140, 900, 12, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7057, 157, 104, 1, 79, "Section"],
Cell[CellGroupData[{
Cell[7186, 162, 146, 3, 31, "Input"],
Cell[7335, 167, 882, 17, 175, "Message"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[8266, 190, 142, 2, 49, "Section"],
Cell[8411, 194, 330, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[8766, 205, 260, 6, 31, "Input"],
Cell[9029, 213, 540, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9606, 225, 314, 7, 31, "Input"],
Cell[9923, 234, 4149, 89, 942, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[14109, 328, 141, 1, 35, "Subsection"],
Cell[CellGroupData[{
Cell[14275, 333, 636, 14, 31, "Input"],
Cell[14914, 349, 627, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15578, 365, 148, 3, 31, "Input"],
Cell[15729, 370, 243, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16009, 378, 717, 16, 52, "Input"],
Cell[16729, 396, 31766, 526, 225, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48532, 927, 202, 4, 31, "Input"],
Cell[48737, 933, 20831, 391, 5143, "Output"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[69617, 1330, 156, 2, 43, "Subsection"],
Cell[69776, 1334, 684, 17, 31, "Input"],
Cell[CellGroupData[{
Cell[70485, 1355, 242, 4, 31, "Input"],
Cell[70730, 1361, 53225, 882, 227, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123992, 2248, 367, 7, 31, "Input"],
Cell[124362, 2257, 832, 19, 234, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[125243, 2282, 120, 1, 43, "Subsection"],
Cell[125366, 2285, 485, 12, 31, "Input"],
Cell[CellGroupData[{
Cell[125876, 2301, 143, 2, 31, "Input"],
Cell[126022, 2305, 53244, 882, 227, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179303, 3192, 373, 9, 31, "Input"],
Cell[179679, 3203, 815, 19, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180531, 3227, 502, 11, 52, "Input"],
Cell[181036, 3240, 887, 21, 85, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181960, 3266, 614, 14, 52, "Input"],
Cell[182577, 3282, 887, 22, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183501, 3309, 718, 16, 52, "Input"],
Cell[184222, 3327, 823, 20, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185082, 3352, 716, 16, 52, "Input"],
Cell[185801, 3370, 834, 20, 92, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[186684, 3396, 162, 2, 43, "Subsection"],
Cell[186849, 3400, 262, 6, 31, "Input"],
Cell[CellGroupData[{
Cell[187136, 3410, 627, 15, 31, "Input"],
Cell[187766, 3427, 503, 11, 56, "Message"],
Cell[188272, 3440, 279, 6, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
